[{"/home/humberto/all-in-pocket/src/index.js":"1","/home/humberto/all-in-pocket/src/reportWebVitals.js":"2","/home/humberto/all-in-pocket/src/App.js":"3","/home/humberto/all-in-pocket/src/helpers/ClockFunction.js":"4","/home/humberto/all-in-pocket/src/helpers/svg.js":"5","/home/humberto/all-in-pocket/src/context/Provider.js":"6","/home/humberto/all-in-pocket/src/components/Email/Email.js":"7","/home/humberto/all-in-pocket/src/helpers/Minutes.js":"8","/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/Daily/Daily.js":"9","/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/HourlyCard/HourlyCard.js":"10","/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/SetNewTask/SetNewTask.js":"11","/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/TaskInformation/TaskInformation.js":"12","/home/humberto/all-in-pocket/src/components/TaskListComponents/TaskList/TaskList.js":"13","/home/humberto/all-in-pocket/src/components/HeaderComponents/Header/Header.js":"14","/home/humberto/all-in-pocket/src/components/HeaderComponents/Nav/Nav.js":"15","/home/humberto/all-in-pocket/src/components/HeaderComponents/Clock/Clock.js":"16","/home/humberto/all-in-pocket/src/components/Inputs/InputText/InputText.js":"17","/home/humberto/all-in-pocket/src/components/Inputs/Button-icon/Button-icon.js":"18","/home/humberto/all-in-pocket/src/components/Inputs/checkbox/Checkbox.js":"19","/home/humberto/all-in-pocket/src/components/Inputs/ColorsSelect/ColorsSelect.js":"20","/home/humberto/all-in-pocket/src/components/TaskListComponents/NewNote/NewNote.js":"21","/home/humberto/all-in-pocket/src/components/TaskListComponents/BlockOfNotes/BlockOfNotes.js":"22","/home/humberto/all-in-pocket/src/components/FinanceComponents/Finance/Finance.js":"23","/home/humberto/all-in-pocket/src/components/FinanceComponents/OverViewFinance/OverViewFinance.js":"24","/home/humberto/all-in-pocket/src/helpers/mockFinance.js":"25","/home/humberto/all-in-pocket/src/components/FinanceComponents/MonthExpenses/MonthExpenses.js":"26","/home/humberto/all-in-pocket/src/components/FinanceComponents/MonthProfit/MonthProfit.js":"27","/home/humberto/all-in-pocket/src/components/FinanceComponents/TransactionCard/TransactionCard.js":"28","/home/humberto/all-in-pocket/src/components/FinanceComponents/AddTransaction/AddTransaction.js":"29","/home/humberto/all-in-pocket/src/components/LoginComponents/Login/Login.js":"30","/home/humberto/all-in-pocket/src/components/Inputs/DarkLightModeSelector/DarkLightModeSelector.js":"31","/home/humberto/all-in-pocket/src/components/WeatherComponents/Weather/Weather.js":"32","/home/humberto/all-in-pocket/src/context/pocketContext.js":"33","/home/humberto/all-in-pocket/src/components/WeatherComponents/WeatherForm/WeatherForm.js":"34","/home/humberto/all-in-pocket/src/helpers/GeonamesReq.jsx":"35","/home/humberto/all-in-pocket/src/helpers/geonamesReqWithCounty.jsx":"36","/home/humberto/all-in-pocket/src/helpers/GeonamesReqWIthStates.jsx":"37","/home/humberto/all-in-pocket/src/components/WeatherComponents/WeatherCard/WeatherCard.js":"38","/home/humberto/all-in-pocket/src/helpers/mockWeather.js":"39","/home/humberto/all-in-pocket/src/components/Inputs/Loading/Loading.js":"40","/home/humberto/all-in-pocket/src/helpers/MinutesWithIncrements.js":"41","/home/humberto/all-in-pocket/src/helpers/ReturnMinutesFromZero.js":"42","/home/humberto/all-in-pocket/src/helpers/GetAllDays.js":"43","/home/humberto/all-in-pocket/src/helpers/GetDayOfYear.js":"44","/home/humberto/all-in-pocket/src/helpers/getDayArrayFromDate.js":"45"},{"size":611,"mtime":1684976586043,"results":"46","hashOfConfig":"47"},{"size":362,"mtime":1684970255054,"results":"48","hashOfConfig":"47"},{"size":823,"mtime":1690319703433,"results":"49","hashOfConfig":"47"},{"size":571,"mtime":1685414992994,"results":"50","hashOfConfig":"47"},{"size":9186,"mtime":1689958606499,"results":"51","hashOfConfig":"47"},{"size":3054,"mtime":1690319675285,"results":"52","hashOfConfig":"47"},{"size":199,"mtime":1684976906648,"results":"53","hashOfConfig":"47"},{"size":296,"mtime":1685049543414,"results":"54","hashOfConfig":"47"},{"size":4278,"mtime":1690319412429,"results":"55","hashOfConfig":"47"},{"size":1302,"mtime":1690236053321,"results":"56","hashOfConfig":"47"},{"size":5702,"mtime":1690304988178,"results":"57","hashOfConfig":"47"},{"size":409,"mtime":1690142037026,"results":"58","hashOfConfig":"47"},{"size":1666,"mtime":1688501015190,"results":"59","hashOfConfig":"47"},{"size":451,"mtime":1688501015186,"results":"60","hashOfConfig":"47"},{"size":1394,"mtime":1690301302006,"results":"61","hashOfConfig":"47"},{"size":497,"mtime":1685377322389,"results":"62","hashOfConfig":"47"},{"size":670,"mtime":1688501015190,"results":"63","hashOfConfig":"47"},{"size":740,"mtime":1690305097894,"results":"64","hashOfConfig":"47"},{"size":721,"mtime":1688501015190,"results":"65","hashOfConfig":"47"},{"size":656,"mtime":1685320013637,"results":"66","hashOfConfig":"47"},{"size":1764,"mtime":1688501015190,"results":"67","hashOfConfig":"47"},{"size":1224,"mtime":1688501015190,"results":"68","hashOfConfig":"47"},{"size":3643,"mtime":1688501015186,"results":"69","hashOfConfig":"47"},{"size":1348,"mtime":1688501015186,"results":"70","hashOfConfig":"47"},{"size":305,"mtime":1686007974680,"results":"71","hashOfConfig":"47"},{"size":2677,"mtime":1688501015186,"results":"72","hashOfConfig":"47"},{"size":1983,"mtime":1688501015186,"results":"73","hashOfConfig":"47"},{"size":5151,"mtime":1688501015186,"results":"74","hashOfConfig":"47"},{"size":5114,"mtime":1688501015186,"results":"75","hashOfConfig":"47"},{"size":726,"mtime":1686507650295,"results":"76","hashOfConfig":"47"},{"size":1977,"mtime":1688501015190,"results":"77","hashOfConfig":"47"},{"size":1562,"mtime":1690320373737,"results":"78","hashOfConfig":"47"},{"size":110,"mtime":1684975765051,"results":"79","hashOfConfig":"47"},{"size":4089,"mtime":1689334409977,"results":"80","hashOfConfig":"47"},{"size":784,"mtime":1690320378777,"results":"81","hashOfConfig":"47"},{"size":691,"mtime":1689338596866,"results":"82","hashOfConfig":"47"},{"size":715,"mtime":1689338578922,"results":"83","hashOfConfig":"47"},{"size":2698,"mtime":1689008923523,"results":"84","hashOfConfig":"47"},{"size":55672,"mtime":1688663101247,"results":"85","hashOfConfig":"47"},{"size":388,"mtime":1688667121140,"results":"86","hashOfConfig":"47"},{"size":616,"mtime":1689634138645,"results":"87","hashOfConfig":"47"},{"size":579,"mtime":1689706647759,"results":"88","hashOfConfig":"47"},{"size":1131,"mtime":1689782009162,"results":"89","hashOfConfig":"47"},{"size":988,"mtime":1690143029135,"results":"90","hashOfConfig":"47"},{"size":350,"mtime":1690143188735,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"1jv46cs",{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"106"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"95"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"95"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"95"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"95"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"95"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"95"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"95"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"95"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"95"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"95"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"95"},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/humberto/all-in-pocket/src/index.js",[],[],[],"/home/humberto/all-in-pocket/src/reportWebVitals.js",[],[],"/home/humberto/all-in-pocket/src/App.js",["248"],[],"import './App.css';\nimport './Animations.css'\nimport { useContext, useEffect } from 'react';\nimport Header from './components/HeaderComponents/Header/Header'\nimport pocketContext from './context/pocketContext';\nimport Nav from './components/HeaderComponents/Nav/Nav'\nimport Login from './components/LoginComponents/Login/Login';\n\nfunction App() {\n  const {\n    page,\n    theme,\n  } = useContext(pocketContext);\n\n  useEffect(() => {\n    document.querySelector('body').style.backgroundColor = theme.backgroundColor;\n  }, [])\n\n  const MainContent = () => (\n    <>\n      <Header />\n      {\n        page\n      }\n      <Nav />\n    </>\n  )\n\n  return (\n    <div className=\"App\" style={ { backgroundColor: theme.backgroundColor } }>\n      {\n        !true ? <Login /> : (MainContent())\n      }\n    </div>\n  );\n}\n\nexport default App;\n","/home/humberto/all-in-pocket/src/helpers/ClockFunction.js",[],[],[],"/home/humberto/all-in-pocket/src/helpers/svg.js",[],[],"/home/humberto/all-in-pocket/src/context/Provider.js",["249","250"],[],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport pocketContext from './pocketContext';\nimport ReturnMinutes from '../helpers/Minutes';\nimport yearFinance from '../helpers/mockFinance';\nimport Daily from '../components/WeeklyPlanerComponents/Daily/Daily';\n\nconst weekday = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\"];\nconst types = ['Food', 'Delivery', 'Rent', 'Gym', 'Car insurence', 'Life insurence', 'Cleaning', 'Education', \n'Light', 'Water', 'Gas', 'Internet', 'Restaurants', 'Drug store', 'Self care', 'Medic', 'Dentist', 'Car', 'Travel', 'Present', 'Cloats'];\nconst ptypes = ['Salary' , 'Investiments', 'Sales', 'Others'];\n\nconst themes = {\n  light: {\n    backgroundColor: '#fff',\n    textColor: '#000',\n    primaryColor: '#fff',\n    boxShadow: '0px 2px 2px 0px hsla(0,0%,0%,0.14), 0px 3px 1px -2px hsla(0,0%,0%,0.12), 0px 1px 5px 0px hsla(0,0%,0%,0.2);'\n  },\n  dark: {\n    backgroundColor: '#121212',\n    textColor: '#fff',\n    primaryColor: '#1F1B24',\n    boxShadow: '0px 2px 2px 0px white, 0px 3px 1px -2px hsla(0,0%,0%,0.12), 0px 1px 5px 0px hsla(0,0%,0%,0.2);'\n  },\n};\n\nfunction Provider({ children }) {\n  const taskArray = JSON.parse(localStorage.getItem('tasklist')) ? JSON.parse(localStorage.getItem('tasklist')) : null;\n  const notesList = localStorage.getItem('notes') ?  JSON.parse(localStorage.getItem('notes')) : []\n  const [page, setPage] = useState(<Daily />);\n  const [exTypes, setExtypes] = useState(localStorage.getItem('exTypes') ? JSON.parse(localStorage.getItem('exTypes')) : types);\n  const [prTypes, setPrtypes] = useState(localStorage.getItem('prTypes') ? JSON.parse(localStorage.getItem('prTypes')) : ptypes);\n  const [tasks, setTasks] = useState(taskArray);\n  const [interfaceNewTask, openInterface] = useState(false);\n  const [notes, setNotes] = useState(notesList);\n  const [finances, setFinances] = useState(localStorage.getItem('finances') ? JSON.parse(localStorage.getItem('finances')) : yearFinance);\n  const [theme, setTheme] = useState(localStorage.getItem('theme') ? JSON.parse(localStorage.getItem('theme')) : themes.light);\n  const [fetchDataWeather, setFetchData] = useState();\n\n  const toggleTheme = () => {\n    document.querySelector('body').style.backgroundColor = theme === themes.light ? themes.dark.backgroundColor : themes.light.backgroundColor;\n    setTheme(theme === themes.light ? themes.dark : themes.light);\n    localStorage.setItem('theme', theme === themes.light ? JSON.stringify(themes.dark) : JSON.stringify(themes.light));\n  };\n\n\n  const contextValue = {\n    fetchDataWeather, \n    setFetchData,\n    prTypes,\n    setPrtypes,\n    exTypes,\n    setExtypes,\n    finances, \n    setFinances,\n    notes,\n    setNotes,\n    page,\n    setPage,\n    tasks,\n    setTasks,\n    interfaceNewTask,\n    openInterface,\n    theme,\n    setTheme,\n    toggleTheme,\n  };\n\n  return (\n    <pocketContext.Provider value={ contextValue }>\n      {children}\n    </pocketContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n","/home/humberto/all-in-pocket/src/components/Email/Email.js",["251"],[],"import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Email = () => (\n  <div>\n    Email Component\n  </div>\n);\n\nEmail.propTypes = {};\n\nEmail.defaultProps = {};\n\nexport default Email;\n","/home/humberto/all-in-pocket/src/helpers/Minutes.js",[],[],"/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/Daily/Daily.js",["252"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport HourlyCard from '../HourlyCard/HourlyCard';\nimport pocketContext from '../../../context/pocketContext';\nimport { useSwipeable } from 'react-swipeable';\nimport '../weekly.css'\nimport ReturnMinutes from '../../../helpers/Minutes';\nimport svgs from '../../../helpers/svg';\nimport SetNewTask from '../SetNewTask/SetNewTask';\nimport { dates } from '../../../helpers/GetAllDays';\nimport Slider from 'react-slick';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport { getDayOfYear } from '../../../helpers/GetDayOfYear';\nimport { getDayArrayFromDate } from '../../../helpers/getDayArrayFromDate';\n\nconst today = new Date();\nconst settings = {\n  infinite: true,\n  slidesToShow: 4,\n  swipeToSlide: true,\n  centerMode: true,\n  className: 'Slider',\n  arrows: false,\n  initialSlide: getDayOfYear(getDayArrayFromDate(today)),\n};\n\nconst Daily = () => {\n  const {\n    tasks,\n    theme,\n  } = useContext(pocketContext);\n\n  const times = ReturnMinutes;\n  const [selected, setSelected] = useState(getDayArrayFromDate(today));\n  const [openInterface, setOpen] = useState(false);\n\n  useEffect(() => {\n    console.log('ddd')\n  }, tasks);\n\n  const renderTheTasks = () => {\n    const tasksToRender = tasks.filter(({ date }) => {\n      if (date) {\n        if (date[0] === selected[0] && date[1] === selected[1]) return true;\n      } \n      return false;\n    }).map((x) => <HourlyCard task={ x } />);\n    if (tasksToRender.length > 0) {\n      return tasksToRender;\n    } return (<h1 className='no-task'>No tasks to be displayed</h1>)\n  }\n\n  const handleSwipeRight = () => {\n    console.log('right', selected)\n  }\n\n  const handleSwipeLeft = () => {\n    console.log('left');\n  }\n\n  const handlers = useSwipeable({\n    onSwipedRight: handleSwipeLeft,\n    onSwipedLeft: handleSwipeRight,\n  });\n\n  const renderMinutesDiv = () => {\n    return times.map((x) => {\n      const hour = x.slice(0, 2);\n      const minutos = x.slice(3, 5);\n      return (\n        <div className=\"colunm side-times\" style={ { color: theme.textColor } }>\n          <p className='i-b n-margin'>\n            {\n              hour\n            }\n          </p>\n          <div className='row s-btw line-div'>\n            <p className=''>\n              ..\n            </p>\n            <div className=''>\n\n            </div>\n          </div>\n          <p className='i-b n-margin'>\n            {\n              minutos\n            }\n          </p>\n        </div>\n      )\n    })\n  }\n\n  const renderDays = () => {\n    let daysToBeDisplay = []\n    dates.forEach(({ month, days}) => {\n      const arrayOfDays = days.map((x) => \n      <div>\n        <button\n          className={`colunm days-selector ${selected[0] === month && selected[1] === x ? 'selected' : null}`}\n          onClick={ () => {\n            console.log(month, x);\n            setSelected([month, x]);\n          }}\n          style={ { color: selected[0] === month && selected[1] === x ? null : theme.color, backgroundColor: theme.backgroundColor } }\n          value={month}\n        >\n          <p>{month.substring(0,3)}</p>\n          <h1 style={ { color: theme.textColor } }>{ x }</h1>\n        </button>\n      </div>);\n      daysToBeDisplay.push(...arrayOfDays);      \n    })\n    return daysToBeDisplay;\n  }\n\n  return(\n    <div>\n      <div className='slick-div'>\n        <Slider {...settings}>\n          {\n            renderDays()\n          }\n        </Slider>\n      </div>\n      <div className=\"colunm s-evenly\" {...handlers}>\n        <button className='add-task-btn row' onClick={ () => setOpen(!openInterface) } \n          style={ { color: theme.textColor, backgroundColor: theme.backgroundColor } }>\n          {\n            svgs.plus('500')\n          }\n        </button>\n        <div className='all-times'>\n          {\n            renderMinutesDiv()\n          }\n        </div>\n        {\n          openInterface ? <SetNewTask openInterface={ setOpen } altura={document.documentElement.scrollTop + (window.innerHeight / 100) * 15 } /> : null\n        }\n        {\n          tasks ? renderTheTasks() : (<h1 className='no-task'>No tasks to be displayed</h1>)\n        }\n      </div>\n    </div>\n  )\n};\n\nDaily.propTypes = {};\n\nDaily.defaultProps = {};\n\nexport default Daily;","/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/HourlyCard/HourlyCard.js",[],[],"/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/SetNewTask/SetNewTask.js",["253"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport pocketContext from '../../../context/pocketContext';\nimport svgs from '../../../helpers/svg';\nimport ColorsSelect from '../../Inputs/ColorsSelect/ColorsSelect';\nimport InputText from '../../Inputs/InputText/InputText';\nimport ReturnMinutesFromZero from '../../../helpers/ReturnMinutesFromZero';\nimport { dates } from '../../../helpers/GetAllDays';\nimport ReturnMinutesWithIncrements from '../../../helpers/MinutesWithIncrements';\nconst Tempos = ReturnMinutesFromZero;\n\n  const SetNewTask = ({ id, openInterface, altura }) => {\n  const hj = new Date();\n\n  const [title, setTitle] = useState('Task title');\n  const [description, setDescription] = useState('Task description');\n  const [duration, setDuration] = useState(1);\n  const [color, setColor] = useState('#73C0FC');\n  const [rmBtn, setRmBtn] = useState(false);\n  const [date, setDate] = useState(`2023-${hj.getMonth() < 10 ? `0${hj.getMonth() + 1}` : hj.getMonth() + 1}-${hj.getDate() < 10 ? `0${hj.getDate()}` : hj.getDate()}`);\n  const [time, setTime] = useState('06:00');\n\n  const {\n    tasks,\n    setTasks,\n    theme,\n  } = useContext(pocketContext);\n\n  useEffect(() => {\n    console.log(date)\n    if (id) {\n    const currentTask = tasks.filter((x) => x.id === id)[0];\n    console.log(currentTask, Object.values(currentTask)[2]);\n    setTitle(currentTask.title);\n    setDescription(currentTask.description);\n    setDuration(currentTask.duration);\n    setTime(currentTask.time);\n    setColor(currentTask.color);\n    setDate(returnDateFormat(currentTask.date));\n    setRmBtn(true)\n    } else {\n      setDate(`2023-${hj.getMonth() < 10 ? `0${hj.getMonth() + 1}` : hj.getMonth() + 1}-${hj.getDate() < 10 ? `0${hj.getDate()}` : hj.getDate()}`)\n    }\n  }, [])\n\n  const returnDateFormat = (taskDate) => {\n    const mes = dates.indexOf(dates.find((x) => x.month === taskDate[0]));\n    console.log(mes)\n    return `2023-${mes < 10 ? `0${mes + 1}` : mes + 1}-${taskDate[1]}`\n  }\n\n  const handleChange = ({ target: { value, name } }) => {\n    name === \"title\" ? setTitle(value) : setDescription(value);\n  }\n\n  const handleDelete = () => {\n    console.log(id);\n    setTasks(tasks.filter((x) => x.id !== id));\n    openInterface(false)\n    localStorage.setItem('tasklist', JSON.stringify(tasks.filter((x) => x.id !== id)));\n  }\n\n  const handleClick = () => {\n    const mes = dates[parseInt(date.substring(5,7)) - 1].month;\n    const dia = parseInt(date.substring(8,10))\n    console.log([mes, dia])\n    const newTasksArray = tasks ? tasks : [];\n    const newTaskObject = {\n      title,\n      description,\n      date: [mes, dia],\n      color,\n      duration,\n      time,\n      id: localStorage.getItem('alltimetasks') ? parseInt(localStorage.getItem('alltimetasks')) + 1 : 1,\n    }\n    if (id) {\n      newTaskObject.id = id;\n      setTasks(tasks.map((x) => x.id === id ? newTaskObject : x));\n      localStorage.setItem('tasklist', JSON.stringify(newTasksArray));\n    } else {\n      setTasks([...newTasksArray, newTaskObject]);\n      localStorage.setItem('tasklist', JSON.stringify([...newTasksArray, newTaskObject]));\n      localStorage.setItem('alltimetasks', localStorage.getItem('alltimetasks') ? parseInt(localStorage.getItem('alltimetasks')) + 1 : 1);\n    }\n    setDuration(0);\n    openInterface(false);\n  }\n\n  return(\n    <div className=\"new-task colunm s-evenly scale-in-ver-top \" style={ {\n      backgroundColor: theme.primaryColor, color: theme.textColor, boxShadow: theme.boxShadow, top: altura }}>\n      <button className='x-btn' onClick={() => {\n        openInterface(false);\n      }} style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n        {\n          svgs.exit()\n        }\n      </button>\n      <InputText name=\"title\" callback={ handleChange } placename={ title } />\n      <InputText name=\"description\" callback={ handleChange } placename={ description } />\n      <label>\n        When:\n        <input type='date' value={ date } className='date-input' onChange={({target: { value }}) => {\n          setDate(value);\n        }}/>\n      </label>\n      <select onChange={({ target: { value } }) => {\n        console.log(value);\n        setTime(value);\n        }} style={ { backgroundColor: theme.primaryColor, color: theme.textColor }} value={time}>\n        <option value=\"1\">Set the time</option>\n            {\n              ReturnMinutesWithIncrements.map((x, index) => (\n                <option value={ x } key={ `${index}-${x}` }>{ x }</option>\n              ))\n            }\n      </select>\n      <select onChange={({ target: { value } }) => {\n        console.log(value)\n        setDuration(value);\n        }} style={ { backgroundColor: theme.primaryColor, color: theme.textColor }} value={duration}>\n        <option value=\"1\">How long will it last</option>\n            {\n              Tempos.slice(1).map((x, index) => (\n                <option value={ index + 1 } key={ `${index}-${x}` }>{ x }</option>\n              ))\n            }\n      </select>\n      <label className='colunm s-evenly'>Choose the color for the task\n       <ColorsSelect selectedColor={ color } callback={ setColor }/>\n      </label>\n      <div className='row s-evenly'>\n        <button onClick={ handleClick } style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n          <p>\n            {\n              rmBtn ? 'Update existing task' : 'Create new Task'\n            }\n          </p>\n        </button>\n        {\n          rmBtn ? <button onClick={handleDelete} style={ {color: 'red'} }>Remove Existing task</button> : null\n        }\n      </div>\n    </div>\n  )\n};\n\nSetNewTask.propTypes = {};\n\nSetNewTask.defaultProps = {};\n\nexport default SetNewTask;\n","/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/TaskInformation/TaskInformation.js",[],[],"/home/humberto/all-in-pocket/src/components/TaskListComponents/TaskList/TaskList.js",["254"],[],"import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport pocketContext from '../../../context/pocketContext';\nimport svgs from '../../../helpers/svg';\nimport NewNote from '../NewNote/NewNote';\nimport BlockOfNotes from '../BlockOfNotes/BlockOfNotes';\n\n\nconst TaskList = () => {\n  const [newNote, setNewNote] = useState(false);\n  const [showNote, setShow] = useState(false);\n  const [id, setId] = useState(0);\n  const {\n    notes,\n    setNotes,\n    theme,\n  } = useContext(pocketContext);\n\n  const renderTasks = () => (\n    <div className='colunm' style={ { width: '100vw' }}>\n        <button className='note-btn row s-evenly' onClick={() => { setNewNote(!newNote) }}\n        style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n        add note\n          {\n            svgs.note()\n          }\n        </button>\n        <div className='row s-btw'>\n          {\n            notes.map(({ title, color, id }) => (\n              <button style={ { backgroundColor: color } } className=\"note slit-in-vertical\" onClick={ () => {\n                setId(id)\n                setShow(true)\n              } }>\n                <h1>{ title }</h1>\n              </button>\n            ))\n          }\n         </div> \n      </div>\n  )\n\n  return(\n    <div className='row blocks scale-in-center'>\n      {\n        showNote ? <BlockOfNotes id={ id } notes={ notes } setNotes={setNotes} setShow={ setShow } /> :\n        ( !newNote ? renderTasks() : <NewNote setNewNote={ setNewNote } setNote={ setNotes } notes={ notes } />)\n      }\n    </div>\n  )\n};\n\nTaskList.propTypes = {};\n\nTaskList.defaultProps = {};\n\nexport default TaskList;\n","/home/humberto/all-in-pocket/src/components/HeaderComponents/Header/Header.js",[],[],"/home/humberto/all-in-pocket/src/components/HeaderComponents/Nav/Nav.js",[],[],"/home/humberto/all-in-pocket/src/components/HeaderComponents/Clock/Clock.js",[],[],"/home/humberto/all-in-pocket/src/components/Inputs/InputText/InputText.js",[],[],"/home/humberto/all-in-pocket/src/components/Inputs/Button-icon/Button-icon.js",["255"],[],"import React, { useContext, useState } from 'react';\nimport pocketContext from '../../../context/pocketContext';\n\n\nconst ButtonIcon = ({ iconSvg, callback, id}) => {\n  const btn = document.querySelector(`#button-${id}`);\n  const {\n    theme,\n  } = useContext(pocketContext);\n  return (\n  <button className=\"b-icon\" id={ `button-${id}` } onClick={ () => {\n    callback();\n    document.querySelector(`#button-${id}`).className = 'selected b-icon'\n  } } style={ { color: btn ? btn.className === 'selected b-icon' ? '#73C0FC' : theme.textColor : theme.textColor,\n  backgroundColor: theme.backgroundColor  } }>\n    {\n      iconSvg()\n    }\n  </button>\n  )\n};\n\nButtonIcon.propTypes = {};\n\nButtonIcon.defaultProps = {};\n\nexport default ButtonIcon;\n","/home/humberto/all-in-pocket/src/components/Inputs/checkbox/Checkbox.js",[],[],"/home/humberto/all-in-pocket/src/components/Inputs/ColorsSelect/ColorsSelect.js",["256"],[],"import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst colors = [\"#F2B21F\", \"#6AF676\", \"#6ADAF6\", \"#5B6AD4\", \"#F76AD9\", \"#BAD45B\", \"#C069F5\", \"#C212D6\", \"#D44539\", \"#C2EB4C\", \"#B9EBC5\", \"#B5D5F5\"];\n\nconst ColorsSelect = ({ callback, selectedColor }) => (\n  <div className='colors-div'>\n    {\n    colors.map((cor) => (\n      <button\n        className={ selectedColor === cor ? \"s-scale color-button\" : \"color-button\" }\n        style={ {\n          backgroundColor: cor,\n        } }\n        onClick={() => callback(cor)}\n      />))\n    }\n  </div >\n);\n\nColorsSelect.propTypes = {};\n\nColorsSelect.defaultProps = {};\n\nexport default ColorsSelect;\n","/home/humberto/all-in-pocket/src/components/TaskListComponents/NewNote/NewNote.js",["257","258"],[],"import React, { useCallback, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport svgs from '../../../helpers/svg';\nimport InputText from '../../Inputs/InputText/InputText';\nimport ColorsSelect from '../../Inputs/ColorsSelect/ColorsSelect';\nimport pocketContext from '../../../context/pocketContext';\n\n\nconst NewNote = ({ setNewNote, setNote, notes }) => {\n  const [title, setTitle] = useState('New Note');\n  const [color, setColor] = useState('#C212D6');\n\n  const {\n    theme,\n  } = useContext(pocketContext);\n\n  const handleChange = ({ target: { value } }) => setTitle(value);\n\n  const handleClick = () => {\n    const noteObject = {\n      title,\n      color,\n      id: notes.length + 1,\n      content: '',\n    }\n    console.log(noteObject);\n    setNote([...notes, noteObject])\n    localStorage.setItem('notes', JSON.stringify([...notes, noteObject]));\n    setNewNote(false);\n  }\n\n  return(\n    <div className='new-note colunm s-btw' style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n      <button onClick={ () => { setNewNote(false) }} style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n        {\n          svgs.exit()\n        }\n      </button>\n      <InputText name=\"title\" callback={ handleChange } placename=\"Task Title\" />\n      <label className='colunm s-evenly'>Choose the color for the task\n       <ColorsSelect selectedColor={ color } callback={ setColor }/>\n      </label>\n      <button onClick={ handleClick } className='string-btn' style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n        Add new Note {\n          svgs.plusNote()\n        }\n      </button>\n    </div>\n  )\n};\n\nNewNote.propTypes = {};\n\nNewNote.defaultProps = {};\n\nexport default NewNote;\n","/home/humberto/all-in-pocket/src/components/TaskListComponents/BlockOfNotes/BlockOfNotes.js",[],[],"/home/humberto/all-in-pocket/src/components/FinanceComponents/Finance/Finance.js",["259"],[],"import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../finance.css'\nimport OverViewFinance from '../OverViewFinance/OverViewFinance';\nimport MonthExpenses from '../MonthExpenses/MonthExpenses';\nimport pocketContext from '../../../context/pocketContext';\nimport MonthProfit from '../MonthProfit/MonthProfit';\nimport AddTransaction from '../AddTransaction/AddTransaction';\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\n\nconst Finance = () => {\n  const date = new Date();\n  let month = monthNames[date.getMonth()];\n\n  const {\n    finances,\n    theme,\n  } = useContext(pocketContext);\n\n  const [atualDisplay, setActualDisplay] = useState('expenses')\n  const [useMonth, setUseMonth] = useState(month);\n\n  const callbackChangeFinances = (newFinances, display) => {\n    setUseFinances(newFinances);\n    if (!display) {\n      if (atualDisplay === 'expenses') {\n        setDisplay(<MonthExpenses finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n      } else if (atualDisplay === 'profit') {\n        setDisplay(<MonthProfit finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n      }\n    } else {\n      if (display === 'expenses') {\n        setDisplay(<MonthExpenses finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n      } else if (display === 'profit') {\n        setDisplay(<MonthProfit finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n      }\n    }\n  }\n\n  const [display, setDisplay] = useState(<MonthExpenses finances={ finances } month={ useMonth } callback={ callbackChangeFinances } />);\n  const [useFinances, setUseFinances] = useState(finances);\n\n  const handleSelect = ({ target: { value } }) => {\n    setUseMonth(value)\n    if (atualDisplay === 'expenses') {\n      setDisplay(<MonthExpenses finances={ useFinances } month={ value } callback={ callbackChangeFinances } />)\n    } else if (atualDisplay === 'profit') {\n      setDisplay(<MonthProfit finances={ useFinances } month={ value } callback={ callbackChangeFinances } />)\n    }\n  }\n\n  const handleSelectTransactions = ({ target: { value }}) => {\n    setActualDisplay(value);\n    if (value === 'expenses') {\n      setDisplay(<MonthExpenses finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n    } else if (value === 'profit') {\n      setDisplay(<MonthProfit finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n    } \n  }\n\n  return (\n    <div className='finance-div'>\n      <select className='finance-select-plus colunm' onChange={ handleSelect } value={ useMonth }\n      style={ { backgroundColor: theme.backgroundColor, color: theme.textColor }}>\n        {\n          monthNames.map((x) => (\n            <option value={x}>{ x }</option>\n          ))\n        }\n      </select>\n      <OverViewFinance finances={ useFinances } month={ useMonth }/>\n      <AddTransaction callback={ callbackChangeFinances } useMonth={ useMonth } />\n      <p className='select-p row' style={ { backgroundColor: theme.backgroundColor, color: theme.textColor }}>\n        This month\n        <select className='colunm' onChange={ handleSelectTransactions } style={ { backgroundColor: theme.backgroundColor, color: theme.textColor }}>\n          <option> expenses </option>\n          <option> profit </option>\n        </select>\n      </p>\n      {\n        display\n      }\n    </div>\n  )\n};\n\nFinance.propTypes = {};\n\nFinance.defaultProps = {};\n\nexport default Finance;\n","/home/humberto/all-in-pocket/src/components/FinanceComponents/OverViewFinance/OverViewFinance.js",["260","261"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport pocketContext from '../../../context/pocketContext';\n\nconst OverViewFinance = ({ month }) => {\n  const {\n    finances,\n    theme,\n  } = useContext(pocketContext);\n  const totalExpenses = finances.filter((x) => x.month === month)[0].expenses.map((x) => x.value).reduce((x, sum) => x + sum, 0);\n  const totalProfit = finances.filter((x) => x.month === month)[0].profit.map((x) => x.value).reduce((x, sum) => x + sum, 0);\n  const total = totalProfit - totalExpenses;\n\n  return (\n    <div className='overview-finance colunm s-evenly scale-in-center' style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n      <div className='sub-finance colunm s-evenly'>\n        <div className='colunm s-evenly'>\n          <p>\n            Your balance\n          </p>\n          <h1 style={ total >= 0 ? { color: \"green\" } : { color: \"red\" } } className='overview-total'>\n            $ { total }\n          </h1>\n        </div>\n        <div className='row s-btw prof-expen'>\n          <p style={ { color: \"green\" } }>total income +${ totalProfit }</p>\n          <p style={ { color: \"red\" } }>total expenses -${ totalExpenses }</p>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nOverViewFinance.propTypes = {};\n\nOverViewFinance.defaultProps = {};\n\nexport default OverViewFinance;\n","/home/humberto/all-in-pocket/src/helpers/mockFinance.js",[],[],"/home/humberto/all-in-pocket/src/components/FinanceComponents/MonthExpenses/MonthExpenses.js",["262"],[],"import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TransactionCard from '../TransactionCard/TransactionCard';\nimport pocketContext from '../../../context/pocketContext';\nimport InputText from '../../Inputs/InputText/InputText';\nimport svgs from '../../../helpers/svg';\n\nconst MonthExpenses = ({ month, finances, callback }) => {\n  const [name, setName] = useState('');\n\n  const {\n    exTypes,\n    setExtypes,\n    theme,\n  } = useContext(pocketContext);\n\n  const newTypes = exTypes.map((tipo) => {\n    return {\n      [tipo]: [...finances.filter((x) => x.month === month)[0].expenses.filter((x) => x.type === tipo)].sort((a, b) => {\n        return b.date - a.date\n      }),\n    }\n  })\n\n  const handleChange = ({ target: { value } }) => {\n    if (value.length > 0 ) {\n      setName(value);\n    }\n  }\n\n  const handleClick = () => {\n    if (name.length) {\n      setExtypes([...exTypes, name]);\n      setName('');\n      localStorage.setItem('exTypes', JSON.stringify([...exTypes, name]));\n    }\n  }\n\n  const deleteCategory = (category) => {\n    setExtypes(exTypes.filter((x) => x !== category));\n    localStorage.setItem('exTypes', JSON.stringify(exTypes.filter((x) => x !== category)));\n  }\n\n  return (\n    <div className='month-expenses' >\n      <div className='row'>\n        <InputText placename=\"set new category\" callback={ handleChange }/>\n        <button className='add-finance-btn' onClick={ handleClick } style={ { backgroundColor: theme.backgroundColor, color: theme.textColor }}>{ svgs.plus() }</button>\n      </div>\n      {\n        newTypes.sort((a,b) => {\n          const varA = [...Object.values(a)[0]];\n          const varB = [...Object.values(b)[0]];\n          if (varA.length > 0 && varB.length === 0 ) {\n            return -1;\n          } else if (varA.length === 0 && varB.length > 0) {\n            return 1;\n          } else if (varA.length === 0 && varB.length === 0) {\n            return 0;\n          } else {\n            if (varA.reduce((total, x) => x.value + total, 0) > varB.reduce((total, x) => x.value + total, 0)) {\n              return -1;\n            } else if (varA.reduce((total, x) => x.value + total, 0) < varB.reduce((total, x) => x.value + total, 0)) {\n              return 1;\n            } else {\n              return 0;\n            }\n          }\n        }).map((x) => {\n          return (\n            <TransactionCard  array={ x } color=\"red\" callback={ callback } finances={ finances } month={ month } isProfit={false} deleteCategory={deleteCategory} />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nMonthExpenses.propTypes = {};\n\nMonthExpenses.defaultProps = {};\n\nexport default MonthExpenses;\n","/home/humberto/all-in-pocket/src/components/FinanceComponents/MonthProfit/MonthProfit.js",["263"],[],"import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TransactionCard from '../TransactionCard/TransactionCard';\nimport pocketContext from '../../../context/pocketContext';\nimport InputText from '../../Inputs/InputText/InputText';\nimport svgs from '../../../helpers/svg';\n\nconst MonthProfit = ({ month, finances, callback }) => {\n  const [name, setName] = useState('');\n  console.log(month);\n\n  const {\n    prTypes,\n    setPrtypes,\n    theme,\n  } = useContext(pocketContext);\n\n  const newTypes = prTypes.map((tipo) => {\n    return {\n      [tipo]: [...finances.filter((x) => x.month === month)[0].profit.filter((x) => x.type === tipo)].sort((a, b) => {\n        return b.date - a.date\n      }),\n    }\n  })\n\n  const handleChange = ({ target: { value } }) => {\n    if (value.length > 0 ) {\n      setName(value);\n    }\n  }\n\n  const handleClick = () => {\n    if (name.length) {\n      setPrtypes([...prTypes, name]);\n      setName('');\n      localStorage.setItem('prTypes', JSON.stringify([...prTypes, name]));\n    }\n  }\n\n  const deleteCategory = (category) => {\n    console.log(prTypes.filter((x) => x !== category), category)\n    setPrtypes(prTypes.filter((x) => x !== category));\n    localStorage.setItem('prTypes', JSON.stringify(prTypes.filter((x) => x !== category)));\n  }\n\n  return (\n    <div className='month-expenses'>\n      <div className='row'>\n        <InputText placename=\"set new category\" callback={ handleChange }/>\n        <button onClick={ handleClick } style={ { backgroundColor: theme.backgroundColor, color: theme.textColor }}>{ svgs.plus() }</button>\n      </div>\n      {\n        newTypes.map((x) => {\n          return (\n            <TransactionCard  array={ x } color=\"green\" callback={ callback } finances={ finances } month={ month } isProfit={true} deleteCategory={deleteCategory} />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nMonthProfit.propTypes = {};\n\nMonthProfit.defaultProps = {};\n\nexport default MonthProfit;\n","/home/humberto/all-in-pocket/src/components/FinanceComponents/TransactionCard/TransactionCard.js",[],[],"/home/humberto/all-in-pocket/src/components/FinanceComponents/AddTransaction/AddTransaction.js",["264","265"],[],"import React, { useContext, useEffect, useState, useSyncExternalStore } from 'react';\nimport PropTypes from 'prop-types';\nimport pocketContext from '../../../context/pocketContext';\nimport InputText from '../../Inputs/InputText/InputText';\nimport Checkbox from '../../Inputs/checkbox/Checkbox';\nimport svgs from '../../../helpers/svg';\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst days = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];\n\nconst AddTransaction = ({ callback, useMonth }) => {\n  const dateCode = new Date();\n  console.log(dateCode.getDate())\n  const [isProfit, setIsProfit] = useState(false);\n  const [name, setName] = useState('Transaction');\n  const [month, setMonth] = useState();\n  const [type, setType] = useState(0);\n  const [date, setDay] = useState(days[dateCode.getDate()]);\n  const [value, setValue] = useState(0);\n  const [svg, setSvg] = useState(svgs.plus());\n  const [empty, setEmpty] = useState(false);\n\n  const {\n    finances,\n    exTypes,\n    prTypes,\n    theme,\n  } = useContext(pocketContext);\n\n  const handleSelect = ({ target: { value, name } }) => {\n    if (name === \"month\") {\n      setMonth(value);\n    } else if ( name === \"date\") {\n      setDay(value);\n    } else {\n      setType(parseInt(value));\n    }\n  }\n\n  useEffect(() => {\n    setMonth(useMonth);\n  }, [useMonth]);\n\n  const handleClick = () => {\n    const newFinances = finances;\n    console.log(prTypes[type], type);\n    if ((isProfit && prTypes.length !== 0) || (!isProfit && exTypes.length !== 0 )) {\n      !isProfit ? newFinances.find((x) => x.month === month).expenses.push({\n        date,\n        value,\n        type: exTypes.length === 1 ? exTypes[0] : exTypes[type],\n        name,\n      }) : newFinances.find((x) => x.month === month).profit.push({\n        date,\n        value,\n        type: prTypes.length === 1 ? prTypes[0] : prTypes[type],\n        name,\n      });\n      localStorage.setItem('finances', JSON.stringify(newFinances));\n      callback(newFinances);      \n    }\n  }\n\n  return(\n    <div className='add-finance colunm s-btw scale-in-center' style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n      <div className='add row s-evenly'>\n        <p>Add a transaction</p>\n        <Checkbox name=\"Profit\" onClick={ () => {\n          setIsProfit(true)\n          setType(0);\n        } } />\n        <Checkbox name=\"Expenses\" onClick={ () => {\n          setIsProfit(false);\n          setType(0);\n        } } />\n      </div>\n      <div className='row s-evenly'>\n        <InputText placename=\"Description\" callback={ ({ target: { value } }) => setName(value) }/>\n        <div class=\"form\">\n          <input type='number' className='input' placeholder='How much ?' onChange={({ target: { value } }) => {\n            setValue(parseInt(value));\n          }}/>\n          <span class=\"input-border\"></span>\n        </div>\n      </div>\n      <div className='row add'>\n        <p>Date:</p>\n      <label>\n          Month\n          <select name='month' className='finance-select-plus colunm' onChange={ handleSelect } value={ month }\n          style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n          {\n            monthNames.map((x) => (\n              <option value={x}>{ x }</option>\n            ))\n          }\n          </select>\n        </label>\n        <label>\n          Day\n          <select name='date' className='finance-select colunm day' onChange={ handleSelect } value={ date }\n          style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n          {\n            days.map((x) => (<option value={x}>{ x }</option>))\n          }\n          </select>\n        </label>\n      </div>\n      <div className='add row'>\n        <p>Type: </p>\n        <select name='type' className='finance-select colunm type' onChange={ handleSelect } value={ type }\n        style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n          {\n            !isProfit ? (\n              exTypes.map((x, index) => (\n                <option value={index}>{ x }</option>\n              ))\n            ) : prTypes.map((x, index) => (\n              <option value={index}>{ x }</option>\n            ))\n          }\n        </select>\n      </div>\n        <button className='string-btn add-btn row' onClick={ () => {\n          if (value > 0) {\n            setTimeout(() => {\n              setSvg(svgs.plus());\n            }, 1000);\n            setSvg(svgs.checkmark());\n            handleClick();\n            setEmpty(false);\n          } else {\n            setEmpty(true);\n          }\n        } } style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n          <p>Add new Transaction</p>\n          { svg }\n        </button>\n        {\n          empty ? <p className='scale-in-center' style={ { color: 'red' } }>Please provide a Value for the transaction</p> : null\n        }\n    </div>\n  )\n};\n\nAddTransaction.propTypes = {};\n\nAddTransaction.defaultProps = {};\n\nexport default AddTransaction;\n","/home/humberto/all-in-pocket/src/components/LoginComponents/Login/Login.js",["266"],[],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport \"./login.css\"\n\n\nconst Login = () => {\n  return (\n    <div className='login'>\n      <h1>\n        Welcome to All.io,\n      </h1>\n      <p>Please, tell us your name</p>\n      <div class=\"form\">\n        <input class=\"input\" placeholder=\"your name\" required=\"\" type=\"text\" onChange={ () => {} } />\n        <span class=\"input-border\"></span>\n      </div>\n      <p>And your password</p>\n      <div class=\"form\">\n        <input class=\"input\" placeholder=\"password\" required=\"\" type=\"password\" onChange={ () => {} } />\n        <span class=\"input-border\"></span>\n      </div>\n    </div>\n  )\n};\n\nLogin.propTypes = {};\n\nLogin.defaultProps = {};\n\nexport default Login;\n","/home/humberto/all-in-pocket/src/components/Inputs/DarkLightModeSelector/DarkLightModeSelector.js",[],[],"/home/humberto/all-in-pocket/src/components/WeatherComponents/Weather/Weather.js",["267","268"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport { Http } from '@capacitor-community/http';\nimport axios from 'axios';\nimport WeatherForm from '../WeatherForm/WeatherForm';\nimport WeatherCard from '../WeatherCard/WeatherCard';\nimport '../weather.css'\nimport Loading from '../../Inputs/Loading/Loading';\nimport pocketContext from '../../../context/pocketContext';\n\nconst Weather = () => {\n  const [weatherData, setWeatherData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const {\n    fetchDataWeather, \n    setFetchData,\n  } = useContext(pocketContext);\n\n  const fetchData = async (location) => {\n    const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n    const options = {\n      url: `http://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${location}&days=1&aqi=yes&alerts=yes`,\n      params: { size: 'XL' },\n    };\n    try {  \n      const response = await Http.get(options);\n      setWeatherData(response.data);\n      setFetchData(response.data);\n      setLoading(false);\n    } catch (error) {\n    }\n  };\n\n  const handleClick = (city) => {\n    fetchData(city);\n    setLoading(true);\n  };\n\n  return (\n    <div>\n    <WeatherForm callback={ handleClick } setLoad={ setLoading } />\n      {\n        !fetchDataWeather ? \n        <>\n          {\n            weatherData ? <WeatherCard weatherData={ weatherData } /> : null\n          }\n          {\n            loading ? <Loading /> : null\n          }\n        </> : <WeatherCard weatherData={ fetchDataWeather } />\n      }\n    </div>\n  );\n};\n\nexport default Weather;","/home/humberto/all-in-pocket/src/context/pocketContext.js",[],[],"/home/humberto/all-in-pocket/src/components/WeatherComponents/WeatherForm/WeatherForm.js",["269"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport fetchCountryNames from '../../../helpers/GeonamesReq';\nimport fetchStatesByCountry from '../../../helpers/geonamesReqWithCounty';\nimport fetchCitiesByState from '../../../helpers/GeonamesReqWIthStates';\nimport pocketContext from '../../../context/pocketContext';\nimport Loading from '../../Inputs/Loading/Loading';\n\nconst WeatherForm = ({callback, setLoad}) => {\n  const {\n    theme,\n  } = useContext(pocketContext);\n\n  const [country, setCountry] = useState(null);\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [countryOptions, setCountrys] = useState(null);\n  const [showStates, setShowStates] = useState(false);\n  const [stateOptions, setStateOptions] = useState(null);\n  const [showCities, setShowCities] = useState(false);\n  const [citiesOptions, setCitiesOptions] = useState(null);\n\n  async function handleCountryChange({ target: { value } }) {\n    setShowCities(false);\n    setShowStates(false);\n    setCountry(value);\n    setLoad(true);\n    console.log(value);\n    const res = await fetchStatesByCountry(value);\n    setLoad(false);\n    console.log(res)\n    setStateOptions(res);\n    setShowStates(true);\n  };\n\n  async function handleCityChange({ target: { value } }) {\n    setCity(value);\n    console.log(value);\n  }\n\n  async function handleStateChange({ target: { value } }) {\n    setShowCities(false);\n    setState(value);\n    setLoad(true);\n    const res = await fetchCitiesByState(country, value);\n    setLoad(false);\n    setCitiesOptions(res);\n    setShowCities(true);\n  };\n  async function fetchData() {\n    setLoad(true);\n    const res = await fetchCountryNames();\n    setLoad(false);\n    setCountrys(res);\n  }\n  useEffect(() => {\n    fetchData();\n  }, [])\n\n  return (\n    <form onSubmit={(event) => {\n      event.preventDefault();\n      callback(city);\n    }}>\n      {\n        countryOptions ? (\n          <>\n            <div className='scale-in-center select-div colunm s-btw'>\n              <label style={ { color: theme.textColor } }>Country:</label>\n              <select onChange={handleCountryChange} className='select-cep' style={{ backgroundColor: theme.backgroundColor, color: theme.textColor }}>\n                <option value=''>Select Country</option>\n                {\n                  countryOptions.map(({ value, label }) => (<option value={ value }>{ label }</option>))\n                }\n              </select>\n            </div>\n            {\n              showStates ? \n              <div className='scale-in-center select-div colunm s-btw'>\n                <label style={ { color: theme.textColor } }>State:</label>\n                <select onChange={handleStateChange} className='select-cep' style={{ backgroundColor: theme.backgroundColor, color: theme.textColor }}>\n                <option value=''>Select State</option>\n                  {\n                    stateOptions.map(({ value, label }) => (<option value={ value }>{ label }</option>))\n                  }\n                </select>\n              </div> : null\n            }\n            {\n              showCities ? \n              <div className='scale-in-center select-div colunm s-btw'>\n                <label style={ { color: theme.textColor } }>City:</label>\n                <select onChange={handleCityChange} className='select-cep' style={{ backgroundColor: theme.backgroundColor, color: theme.textColor }}>\n                <option value=''>Select City</option>\n                  {\n                    citiesOptions.map(({ value, label }) => (<option value={ value }>{ label }</option>))\n                  }\n                </select>\n              </div> : null\n            }\n            {\n              city && country && state ? <button\n                type=\"submit\"\n                className='btn-search scale-in-center'\n                style={{ backgroundColor: theme.backgroundColor, color: theme.textColor }}\n              >Fetch Weather</button> : null\n            }\n          </>\n          ) : <Loading />\n      }\n    </form>\n  );\n};\n\nexport default WeatherForm;\n","/home/humberto/all-in-pocket/src/helpers/GeonamesReq.jsx",[],[],"/home/humberto/all-in-pocket/src/helpers/geonamesReqWithCounty.jsx",[],[],"/home/humberto/all-in-pocket/src/helpers/GeonamesReqWIthStates.jsx",[],[],"/home/humberto/all-in-pocket/src/components/WeatherComponents/WeatherCard/WeatherCard.js",["270","271"],[],"import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport svgs from '../../../helpers/svg';\nimport pocketContext from '../../../context/pocketContext';\n\n\nconst WeatherCard = ({ weatherData }) => {\n  const arrayHours = weatherData.forecast.forecastday[0].hour.map((x) => {\n    const { chance_of_rain, temp_c, time } = x;\n    return {\n      rain: chance_of_rain,\n      temp_c,\n      icon: x.condition.icon,\n      time: time.substr(time.length -5),\n    }\n  })\n\n  const {\n    theme,\n  } = useContext(pocketContext);\n\n  console.log(arrayHours);\n\n  return (\n    <div className='weather-card'>\n    <div className='subs row s-evenly' >\n      <div className='humidity scale-in-center' style={ { backgroundColor: theme.primaryColor, color: theme.textColor } }>\n        {\n          svgs.water()\n        }\n        <div>\n          <p>\n            {\n              weatherData.current.humidity + '%'\n            }\n          </p>\n          <p>humidity</p>\n        </div>\n      </div>\n      <div className='humidity scale-in-center' style={ { backgroundColor: theme.primaryColor, color: theme.textColor } }>\n        {\n          svgs.wind()\n        }\n        <div>\n          <p>\n            {\n              weatherData.current.wind_kph + 'km/h'\n            }\n          </p>\n          <p>wind</p>\n        </div>\n      </div>\n    </div>\n    <div className='weather-div column s-evenly scale-in-center' style={ { backgroundColor: theme.primaryColor, color: theme.textColor } }>\n      <h1>\n        {\n          weatherData.location.name\n        }\n      </h1>\n      <p className='gray'>\n        {\n          `${weatherData.location.region}, ${weatherData.location.country}`\n        }        \n      </p>\n      <h1>{ weatherData.current.condition.text }</h1>\n      <img src={ weatherData.current.condition.icon } alt='condition img' />\n      <div className='row temp-div'>\n        <h1 className='temp'>\n          {\n            weatherData.current.temp_c + '°C'\n          }\n        </h1>\n        <div className='line-v'></div>\n        <h1 className='temp'>\n          {\n            weatherData.current.temp_f + '°F'\n          }\n        </h1>\n      </div>\n      {\n        arrayHours.map((x) => {\n          const { rain, temp_c, icon, time } = x;\n          return (\n            <div className='row s-evenly hourly-card'>\n              <p>{ time }</p>\n              <div className='img-div'>\n                <img src={ icon } />\n              </div>\n              <h1>{ temp_c }°C</h1>\n              <p>{ svgs.water() }{ rain }%</p>\n            </div>\n          )\n        })\n      }\n    </div>\n    </div>\n)};\n\nWeatherCard.propTypes = {};\n\nWeatherCard.defaultProps = {};\n\nexport default WeatherCard;\n","/home/humberto/all-in-pocket/src/helpers/mockWeather.js",[],[],[],"/home/humberto/all-in-pocket/src/components/Inputs/Loading/Loading.js",[],[],"/home/humberto/all-in-pocket/src/helpers/MinutesWithIncrements.js",[],[],"/home/humberto/all-in-pocket/src/helpers/ReturnMinutesFromZero.js",[],[],"/home/humberto/all-in-pocket/src/helpers/GetAllDays.js",[],[],"/home/humberto/all-in-pocket/src/helpers/GetDayOfYear.js",[],[],"/home/humberto/all-in-pocket/src/helpers/getDayArrayFromDate.js",[],[],{"ruleId":"272","severity":1,"message":"273","line":17,"column":6,"nodeType":"274","endLine":17,"endColumn":8,"suggestions":"275"},{"ruleId":"276","severity":1,"message":"277","line":4,"column":8,"nodeType":"278","messageId":"279","endLine":4,"endColumn":21},{"ruleId":"276","severity":1,"message":"280","line":8,"column":7,"nodeType":"278","messageId":"279","endLine":8,"endColumn":14},{"ruleId":"276","severity":1,"message":"281","line":2,"column":8,"nodeType":"278","messageId":"279","endLine":2,"endColumn":17},{"ruleId":"272","severity":1,"message":"282","line":39,"column":6,"nodeType":"278","endLine":39,"endColumn":11},{"ruleId":"272","severity":1,"message":"283","line":43,"column":6,"nodeType":"274","endLine":43,"endColumn":8,"suggestions":"284"},{"ruleId":"276","severity":1,"message":"281","line":2,"column":8,"nodeType":"278","messageId":"279","endLine":2,"endColumn":17},{"ruleId":"276","severity":1,"message":"285","line":1,"column":29,"nodeType":"278","messageId":"279","endLine":1,"endColumn":37},{"ruleId":"276","severity":1,"message":"281","line":2,"column":8,"nodeType":"278","messageId":"279","endLine":2,"endColumn":17},{"ruleId":"276","severity":1,"message":"286","line":1,"column":17,"nodeType":"278","messageId":"279","endLine":1,"endColumn":28},{"ruleId":"276","severity":1,"message":"281","line":2,"column":8,"nodeType":"278","messageId":"279","endLine":2,"endColumn":17},{"ruleId":"276","severity":1,"message":"281","line":2,"column":8,"nodeType":"278","messageId":"279","endLine":2,"endColumn":17},{"ruleId":"276","severity":1,"message":"287","line":1,"column":29,"nodeType":"278","messageId":"279","endLine":1,"endColumn":38},{"ruleId":"276","severity":1,"message":"285","line":1,"column":40,"nodeType":"278","messageId":"279","endLine":1,"endColumn":48},{"ruleId":"276","severity":1,"message":"281","line":2,"column":8,"nodeType":"278","messageId":"279","endLine":2,"endColumn":17},{"ruleId":"276","severity":1,"message":"281","line":2,"column":8,"nodeType":"278","messageId":"279","endLine":2,"endColumn":17},{"ruleId":"276","severity":1,"message":"288","line":1,"column":50,"nodeType":"278","messageId":"279","endLine":1,"endColumn":70},{"ruleId":"276","severity":1,"message":"281","line":2,"column":8,"nodeType":"278","messageId":"279","endLine":2,"endColumn":17},{"ruleId":"276","severity":1,"message":"281","line":2,"column":8,"nodeType":"278","messageId":"279","endLine":2,"endColumn":17},{"ruleId":"276","severity":1,"message":"287","line":1,"column":29,"nodeType":"278","messageId":"279","endLine":1,"endColumn":38},{"ruleId":"276","severity":1,"message":"289","line":3,"column":8,"nodeType":"278","messageId":"279","endLine":3,"endColumn":13},{"ruleId":"272","severity":1,"message":"290","line":57,"column":6,"nodeType":"274","endLine":57,"endColumn":8,"suggestions":"291"},{"ruleId":"276","severity":1,"message":"281","line":2,"column":8,"nodeType":"278","messageId":"279","endLine":2,"endColumn":17},{"ruleId":"292","severity":1,"message":"293","line":87,"column":17,"nodeType":"294","endLine":87,"endColumn":37},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'theme.backgroundColor'. Either include it or remove the dependency array.","ArrayExpression",["295"],"no-unused-vars","'ReturnMinutes' is defined but never used.","Identifier","unusedVar","'weekday' is assigned a value but never used.","'PropTypes' is defined but never used.","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook useEffect has missing dependencies: 'date', 'hj', 'id', and 'tasks'. Either include them or remove the dependency array.",["296"],"'useState' is defined but never used.","'useCallback' is defined but never used.","'useEffect' is defined but never used.","'useSyncExternalStore' is defined but never used.","'axios' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["297"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},"Update the dependencies array to be: [theme.backgroundColor]",{"range":"304","text":"305"},"Update the dependencies array to be: [date, hj, id, tasks]",{"range":"306","text":"307"},"Update the dependencies array to be: [fetchData]",{"range":"308","text":"309"},[519,521],"[theme.backgroundColor]",[1780,1782],"[date, hj, id, tasks]",[1783,1785],"[fetchData]"]