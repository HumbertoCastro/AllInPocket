[{"/home/humberto/all-in-pocket/src/index.js":"1","/home/humberto/all-in-pocket/src/reportWebVitals.js":"2","/home/humberto/all-in-pocket/src/App.js":"3","/home/humberto/all-in-pocket/src/helpers/ClockFunction.js":"4","/home/humberto/all-in-pocket/src/helpers/svg.js":"5","/home/humberto/all-in-pocket/src/context/Provider.js":"6","/home/humberto/all-in-pocket/src/components/Email/Email.js":"7","/home/humberto/all-in-pocket/src/helpers/Minutes.js":"8","/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/Daily/Daily.js":"9","/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/HourlyCard/HourlyCard.js":"10","/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/SetNewTask/SetNewTask.js":"11","/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/TaskInformation/TaskInformation.js":"12","/home/humberto/all-in-pocket/src/components/TaskListComponents/TaskList/TaskList.js":"13","/home/humberto/all-in-pocket/src/components/HeaderComponents/Header/Header.js":"14","/home/humberto/all-in-pocket/src/components/HeaderComponents/Nav/Nav.js":"15","/home/humberto/all-in-pocket/src/components/HeaderComponents/Clock/Clock.js":"16","/home/humberto/all-in-pocket/src/components/Inputs/InputText/InputText.js":"17","/home/humberto/all-in-pocket/src/components/Inputs/Button-icon/Button-icon.js":"18","/home/humberto/all-in-pocket/src/components/Inputs/checkbox/Checkbox.js":"19","/home/humberto/all-in-pocket/src/components/Inputs/ColorsSelect/ColorsSelect.js":"20","/home/humberto/all-in-pocket/src/components/TaskListComponents/NewNote/NewNote.js":"21","/home/humberto/all-in-pocket/src/components/TaskListComponents/BlockOfNotes/BlockOfNotes.js":"22","/home/humberto/all-in-pocket/src/components/FinanceComponents/Finance/Finance.js":"23","/home/humberto/all-in-pocket/src/components/FinanceComponents/OverViewFinance/OverViewFinance.js":"24","/home/humberto/all-in-pocket/src/helpers/mockFinance.js":"25","/home/humberto/all-in-pocket/src/components/FinanceComponents/MonthExpenses/MonthExpenses.js":"26","/home/humberto/all-in-pocket/src/components/FinanceComponents/MonthProfit/MonthProfit.js":"27","/home/humberto/all-in-pocket/src/components/FinanceComponents/TransactionCard/TransactionCard.js":"28","/home/humberto/all-in-pocket/src/components/FinanceComponents/AddTransaction/AddTransaction.js":"29","/home/humberto/all-in-pocket/src/components/LoginComponents/Login/Login.js":"30","/home/humberto/all-in-pocket/src/components/Inputs/DarkLightModeSelector/DarkLightModeSelector.js":"31","/home/humberto/all-in-pocket/src/components/WeatherComponents/Weather/Weather.js":"32","/home/humberto/all-in-pocket/src/context/pocketContext.js":"33","/home/humberto/all-in-pocket/src/components/WeatherComponents/WeatherForm/WeatherForm.js":"34","/home/humberto/all-in-pocket/src/helpers/GeonamesReq.jsx":"35","/home/humberto/all-in-pocket/src/helpers/geonamesReqWithCounty.jsx":"36","/home/humberto/all-in-pocket/src/helpers/GeonamesReqWIthStates.jsx":"37","/home/humberto/all-in-pocket/src/components/WeatherComponents/WeatherCard/WeatherCard.js":"38","/home/humberto/all-in-pocket/src/helpers/mockWeather.js":"39","/home/humberto/all-in-pocket/src/components/Inputs/Loading/Loading.js":"40"},{"size":611,"mtime":1684976586043,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1684970255054,"results":"43","hashOfConfig":"42"},{"size":700,"mtime":1688500769526,"results":"44","hashOfConfig":"42"},{"size":571,"mtime":1685414992994,"results":"45","hashOfConfig":"42"},{"size":9141,"mtime":1688664869408,"results":"46","hashOfConfig":"42"},{"size":3412,"mtime":1689008332455,"results":"47","hashOfConfig":"42"},{"size":199,"mtime":1684976906648,"results":"48","hashOfConfig":"42"},{"size":296,"mtime":1685049543414,"results":"49","hashOfConfig":"42"},{"size":2589,"mtime":1688661329935,"results":"50","hashOfConfig":"42"},{"size":1850,"mtime":1688501015194,"results":"51","hashOfConfig":"42"},{"size":6401,"mtime":1688501015194,"results":"52","hashOfConfig":"42"},{"size":419,"mtime":1687892948064,"results":"53","hashOfConfig":"42"},{"size":1666,"mtime":1688501015190,"results":"54","hashOfConfig":"42"},{"size":451,"mtime":1688501015186,"results":"55","hashOfConfig":"42"},{"size":1279,"mtime":1688501015190,"results":"56","hashOfConfig":"42"},{"size":497,"mtime":1685377322389,"results":"57","hashOfConfig":"42"},{"size":670,"mtime":1688501015190,"results":"58","hashOfConfig":"42"},{"size":738,"mtime":1688501015190,"results":"59","hashOfConfig":"42"},{"size":721,"mtime":1688501015190,"results":"60","hashOfConfig":"42"},{"size":656,"mtime":1685320013637,"results":"61","hashOfConfig":"42"},{"size":1764,"mtime":1688501015190,"results":"62","hashOfConfig":"42"},{"size":1224,"mtime":1688501015190,"results":"63","hashOfConfig":"42"},{"size":3643,"mtime":1688501015186,"results":"64","hashOfConfig":"42"},{"size":1348,"mtime":1688501015186,"results":"65","hashOfConfig":"42"},{"size":305,"mtime":1686007974680,"results":"66","hashOfConfig":"42"},{"size":2677,"mtime":1688501015186,"results":"67","hashOfConfig":"42"},{"size":1983,"mtime":1688501015186,"results":"68","hashOfConfig":"42"},{"size":5151,"mtime":1688501015186,"results":"69","hashOfConfig":"42"},{"size":5114,"mtime":1688501015186,"results":"70","hashOfConfig":"42"},{"size":726,"mtime":1686507650295,"results":"71","hashOfConfig":"42"},{"size":1977,"mtime":1688501015190,"results":"72","hashOfConfig":"42"},{"size":1511,"mtime":1689008517583,"results":"73","hashOfConfig":"42"},{"size":110,"mtime":1684975765051,"results":"74","hashOfConfig":"42"},{"size":4054,"mtime":1689010514275,"results":"75","hashOfConfig":"42"},{"size":855,"mtime":1688668219732,"results":"76","hashOfConfig":"42"},{"size":760,"mtime":1689009883038,"results":"77","hashOfConfig":"42"},{"size":760,"mtime":1688668256352,"results":"78","hashOfConfig":"42"},{"size":2698,"mtime":1689008923523,"results":"79","hashOfConfig":"42"},{"size":55672,"mtime":1688663101247,"results":"80","hashOfConfig":"42"},{"size":388,"mtime":1688667121140,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"1jv46cs",{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"95"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"85"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"85"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"85"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"85"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"85"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"85"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"85"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"85"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"85"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"85"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"200"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"/home/humberto/all-in-pocket/src/index.js",[],[],[],"/home/humberto/all-in-pocket/src/reportWebVitals.js",[],[],"/home/humberto/all-in-pocket/src/App.js",[],[],"/home/humberto/all-in-pocket/src/helpers/ClockFunction.js",[],[],[],"/home/humberto/all-in-pocket/src/helpers/svg.js",[],[],"/home/humberto/all-in-pocket/src/context/Provider.js",[],[],"/home/humberto/all-in-pocket/src/components/Email/Email.js",["217"],[],"import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Email = () => (\n  <div>\n    Email Component\n  </div>\n);\n\nEmail.propTypes = {};\n\nEmail.defaultProps = {};\n\nexport default Email;\n","/home/humberto/all-in-pocket/src/helpers/Minutes.js",[],[],"/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/Daily/Daily.js",[],[],"/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/HourlyCard/HourlyCard.js",[],[],"/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/SetNewTask/SetNewTask.js",["218"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport pocketContext from '../../../context/pocketContext';\nimport svgs from '../../../helpers/svg';\nimport Checkbox from '../../Inputs/checkbox/Checkbox';\nimport ColorsSelect from '../../Inputs/ColorsSelect/ColorsSelect';\nimport InputText from '../../Inputs/InputText/InputText';\nconst weekday = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thur\",\"Fri\",\"Sat\"];\nconst Tempos = ['00:30', '01:00', '01:30', '02:00', '02:30', '03:00', '03:30', '04:00'];\n\nconst SetNewTask = ({ id:{ id, taskId }, weak, openInterface }) => {  \n  const [title, setTitle] = useState('Task title');\n  const [description, setDescription] = useState('Task description');\n  const [weakDays, setWeakDays] = useState([]);\n  const [onlyOnce, setOnlyOnce] = useState(false);\n  const [duration, setDuration] = useState(1);\n  const [color, setColor] = useState('#00000');\n  const [rmBtn, setRmBtn] = useState(false);\n\n  const {\n    tasks,\n    setTasks,\n    setNofTasks,\n    nTasks,\n    theme,\n  } = useContext(pocketContext);\n\n  useEffect(() => {\n    console.log(tasks);\n    const currentTask = tasks.filter((weakDay) => weakDay.weak === weak)[0].cardArray.find((x) => x.id === id);\n    setWeakDays([weak]);\n    setTitle(currentTask.task.title);\n    setDescription(currentTask.task.description);\n    setColor(currentTask.color);\n    console.log(currentTask);\n    if ( currentTask.taskId !== 0) {\n      const weaksThatRepet = tasks.filter(({ cardArray }) => cardArray.some((x) => x.taskId === currentTask.taskId)).map((y) => y.weak);\n      setWeakDays(weaksThatRepet);\n      setRmBtn(true);\n    }\n    const newTaskObject = document.querySelector(\".new-task\");\n    newTaskObject.style.top = document.documentElement.scrollTop + 'px';\n  }, [onlyOnce])\n\n  const handleChange = ({ target: { value, name } }) => {\n    name === \"title\" ? setTitle(value) : setDescription(value);\n  }\n\n  const handleWeakClick = ({ target: { name, className } }) => {\n    weakDays.some((x) => x === name) ? setWeakDays(weakDays.filter((y) => y !== name)) : setWeakDays([...weakDays, name]);\n  }\n\n  const handleDelete = () => {\n    tasks.filter(({ cardArray }) => {\n      for (let i = id + 1; i < parseInt(cardArray[id].task.duration) + id; i += 1) {\n        cardArray[i].overlap = false;\n        cardArray[i].task.duration = '0';\n      }\n      return cardArray;\n    });\n    const filter = tasks;\n    for (let i = 0; i < filter.length; i += 1) {\n      filter[i].cardArray.forEach((x) => {\n        if (x.taskId === taskId) {\n          x.hasTask = false;\n          x.taskId = 0;\n          x.color = 'teste';\n          setNofTasks(nTasks - 1);\n        }\n      })\n    }\n    setTasks(filter);\n    openInterface(false);\n    localStorage.setItem('tasklist', JSON.stringify(filter));\n  }\n\n  const handleClick = () => {\n    tasks.filter(({ cardArray }) => {\n      for (let i = id + 1; i < parseInt(cardArray[id].task.duration) + id; i += 1) {\n        cardArray[i].overlap = false;\n        cardArray[i].task.duration = '0';\n      }\n      return cardArray;\n    });\n    const newTasks = tasks;\n    const newObject = {\n      title,\n      description,\n      duration,\n    }\n    !onlyOnce ? newTasks.filter((weakList) => weakDays.some((x) => x === weakList.weak)).forEach((x) => {\n      for (let i = id + 1; i < id + parseInt(duration); i += 1) {\n        x.cardArray[i].overlap = true;\n      }\n      Object.assign(x.cardArray.find((x) => x.id === id), {\n        task: newObject,\n        hasTask: true,\n        taskId: nTasks + 1,\n        color,\n      })\n    }) : newTasks.filter((weakList) => weakList.weak === weak).forEach((x) => {\n      for (let i = id + 1; i < id + duration; i += 1) {\n        x.cardArray[i].overlap = true;\n      }\n      Object.assign(x.cardArray.find((x) => x.id === id), {\n        task: newObject,\n        hasTask: true,\n        taskId: nTasks + 1,\n        color,\n      })     \n    })\n    setDuration(0);\n    setNofTasks(nTasks + 1);\n    setTasks(newTasks);\n    openInterface(false);\n    localStorage.setItem('tasklist', JSON.stringify(newTasks));\n  }\n\n  return(\n    <div className=\"new-task colunm s-evenly scale-in-ver-top \" style={ {\n      backgroundColor: theme.primaryColor, color: theme.textColor, boxShadow: theme.boxShadow }}>\n      <button className='x-btn' onClick={() => {\n        openInterface(false);\n      }} style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n        {\n          svgs.exit()\n        }\n      </button>\n      <InputText name=\"title\" callback={ handleChange } placename={ title } />\n      <InputText name=\"description\" callback={ handleChange } placename={ description } />\n      {\n        onlyOnce ? null :\n        <div>\n          Repet on:\n          {\n            (\n              weekday.map((x) => (\n                <button\n                  name={ x }\n                  className={ weakDays.some((dayname) => dayname === x) ? \"selected weak-day s-scale\" : \"weak-day\"}\n                  style={ { backgroundColor: theme.backgroundColor, color: theme.textColor }}\n                  onClick={ handleWeakClick }>\n                  {\n                    x\n                  }\n                </button>\n              ))\n            )\n          }\n        </div>\n      }\n      <Checkbox onClick={ () => setOnlyOnce(!onlyOnce) } name=\"Only on this day\" />\n      <select onChange={({ target: { value } }) => {\n          setDuration(value);\n        }} style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n        <option value=\"1\">How long will it last</option>\n            {\n              Tempos.map((x, index) => (\n                <option value={ index + 1 } key={ `${index}-${x}` }>{ x }</option>\n              ))\n            }\n      </select>\n      <label className='colunm s-evenly'>Choose the color for the task\n       <ColorsSelect selectedColor={ color } callback={ setColor }/>\n      </label>\n      <div className='row s-evenly'>\n        <button onClick={ handleClick } style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n          <p>\n            {\n              rmBtn ? 'Update existing task' : 'Create new Task'\n            }\n          </p>\n        </button>\n        {\n          rmBtn ? <button onClick={handleDelete} style={ {color: 'red'} }>Remove Existing task</button> : null\n        }\n      </div>\n    </div>\n  )\n};\n\nSetNewTask.propTypes = {};\n\nSetNewTask.defaultProps = {};\n\nexport default SetNewTask;\n","/home/humberto/all-in-pocket/src/components/WeeklyPlanerComponents/TaskInformation/TaskInformation.js",[],[],"/home/humberto/all-in-pocket/src/components/TaskListComponents/TaskList/TaskList.js",["219"],[],"import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport pocketContext from '../../../context/pocketContext';\nimport svgs from '../../../helpers/svg';\nimport NewNote from '../NewNote/NewNote';\nimport BlockOfNotes from '../BlockOfNotes/BlockOfNotes';\n\n\nconst TaskList = () => {\n  const [newNote, setNewNote] = useState(false);\n  const [showNote, setShow] = useState(false);\n  const [id, setId] = useState(0);\n  const {\n    notes,\n    setNotes,\n    theme,\n  } = useContext(pocketContext);\n\n  const renderTasks = () => (\n    <div className='colunm' style={ { width: '100vw' }}>\n        <button className='note-btn row s-evenly' onClick={() => { setNewNote(!newNote) }}\n        style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n        add note\n          {\n            svgs.note()\n          }\n        </button>\n        <div className='row s-btw'>\n          {\n            notes.map(({ title, color, id }) => (\n              <button style={ { backgroundColor: color } } className=\"note slit-in-vertical\" onClick={ () => {\n                setId(id)\n                setShow(true)\n              } }>\n                <h1>{ title }</h1>\n              </button>\n            ))\n          }\n         </div> \n      </div>\n  )\n\n  return(\n    <div className='row blocks scale-in-center'>\n      {\n        showNote ? <BlockOfNotes id={ id } notes={ notes } setNotes={setNotes} setShow={ setShow } /> :\n        ( !newNote ? renderTasks() : <NewNote setNewNote={ setNewNote } setNote={ setNotes } notes={ notes } />)\n      }\n    </div>\n  )\n};\n\nTaskList.propTypes = {};\n\nTaskList.defaultProps = {};\n\nexport default TaskList;\n","/home/humberto/all-in-pocket/src/components/HeaderComponents/Header/Header.js",[],[],"/home/humberto/all-in-pocket/src/components/HeaderComponents/Nav/Nav.js",[],[],"/home/humberto/all-in-pocket/src/components/HeaderComponents/Clock/Clock.js",[],[],"/home/humberto/all-in-pocket/src/components/Inputs/InputText/InputText.js",[],[],"/home/humberto/all-in-pocket/src/components/Inputs/Button-icon/Button-icon.js",[],[],"/home/humberto/all-in-pocket/src/components/Inputs/checkbox/Checkbox.js",[],[],"/home/humberto/all-in-pocket/src/components/Inputs/ColorsSelect/ColorsSelect.js",["220"],[],"import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst colors = [\"#F2B21F\", \"#6AF676\", \"#6ADAF6\", \"#5B6AD4\", \"#F76AD9\", \"#BAD45B\", \"#C069F5\", \"#C212D6\", \"#D44539\", \"#C2EB4C\", \"#B9EBC5\", \"#B5D5F5\"];\n\nconst ColorsSelect = ({ callback, selectedColor }) => (\n  <div className='colors-div'>\n    {\n    colors.map((cor) => (\n      <button\n        className={ selectedColor === cor ? \"s-scale color-button\" : \"color-button\" }\n        style={ {\n          backgroundColor: cor,\n        } }\n        onClick={() => callback(cor)}\n      />))\n    }\n  </div >\n);\n\nColorsSelect.propTypes = {};\n\nColorsSelect.defaultProps = {};\n\nexport default ColorsSelect;\n","/home/humberto/all-in-pocket/src/components/TaskListComponents/NewNote/NewNote.js",["221","222"],[],"import React, { useCallback, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport svgs from '../../../helpers/svg';\nimport InputText from '../../Inputs/InputText/InputText';\nimport ColorsSelect from '../../Inputs/ColorsSelect/ColorsSelect';\nimport pocketContext from '../../../context/pocketContext';\n\n\nconst NewNote = ({ setNewNote, setNote, notes }) => {\n  const [title, setTitle] = useState('New Note');\n  const [color, setColor] = useState('#C212D6');\n\n  const {\n    theme,\n  } = useContext(pocketContext);\n\n  const handleChange = ({ target: { value } }) => setTitle(value);\n\n  const handleClick = () => {\n    const noteObject = {\n      title,\n      color,\n      id: notes.length + 1,\n      content: '',\n    }\n    console.log(noteObject);\n    setNote([...notes, noteObject])\n    localStorage.setItem('notes', JSON.stringify([...notes, noteObject]));\n    setNewNote(false);\n  }\n\n  return(\n    <div className='new-note colunm s-btw' style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n      <button onClick={ () => { setNewNote(false) }} style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n        {\n          svgs.exit()\n        }\n      </button>\n      <InputText name=\"title\" callback={ handleChange } placename=\"Task Title\" />\n      <label className='colunm s-evenly'>Choose the color for the task\n       <ColorsSelect selectedColor={ color } callback={ setColor }/>\n      </label>\n      <button onClick={ handleClick } className='string-btn' style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n        Add new Note {\n          svgs.plusNote()\n        }\n      </button>\n    </div>\n  )\n};\n\nNewNote.propTypes = {};\n\nNewNote.defaultProps = {};\n\nexport default NewNote;\n","/home/humberto/all-in-pocket/src/components/TaskListComponents/BlockOfNotes/BlockOfNotes.js",[],[],"/home/humberto/all-in-pocket/src/components/FinanceComponents/Finance/Finance.js",["223"],[],"import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../finance.css'\nimport OverViewFinance from '../OverViewFinance/OverViewFinance';\nimport MonthExpenses from '../MonthExpenses/MonthExpenses';\nimport pocketContext from '../../../context/pocketContext';\nimport MonthProfit from '../MonthProfit/MonthProfit';\nimport AddTransaction from '../AddTransaction/AddTransaction';\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\n\nconst Finance = () => {\n  const date = new Date();\n  let month = monthNames[date.getMonth()];\n\n  const {\n    finances,\n    theme,\n  } = useContext(pocketContext);\n\n  const [atualDisplay, setActualDisplay] = useState('expenses')\n  const [useMonth, setUseMonth] = useState(month);\n\n  const callbackChangeFinances = (newFinances, display) => {\n    setUseFinances(newFinances);\n    if (!display) {\n      if (atualDisplay === 'expenses') {\n        setDisplay(<MonthExpenses finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n      } else if (atualDisplay === 'profit') {\n        setDisplay(<MonthProfit finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n      }\n    } else {\n      if (display === 'expenses') {\n        setDisplay(<MonthExpenses finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n      } else if (display === 'profit') {\n        setDisplay(<MonthProfit finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n      }\n    }\n  }\n\n  const [display, setDisplay] = useState(<MonthExpenses finances={ finances } month={ useMonth } callback={ callbackChangeFinances } />);\n  const [useFinances, setUseFinances] = useState(finances);\n\n  const handleSelect = ({ target: { value } }) => {\n    setUseMonth(value)\n    if (atualDisplay === 'expenses') {\n      setDisplay(<MonthExpenses finances={ useFinances } month={ value } callback={ callbackChangeFinances } />)\n    } else if (atualDisplay === 'profit') {\n      setDisplay(<MonthProfit finances={ useFinances } month={ value } callback={ callbackChangeFinances } />)\n    }\n  }\n\n  const handleSelectTransactions = ({ target: { value }}) => {\n    setActualDisplay(value);\n    if (value === 'expenses') {\n      setDisplay(<MonthExpenses finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n    } else if (value === 'profit') {\n      setDisplay(<MonthProfit finances={ useFinances } month={ useMonth } callback={ callbackChangeFinances } />)\n    } \n  }\n\n  return (\n    <div className='finance-div'>\n      <select className='finance-select-plus colunm' onChange={ handleSelect } value={ useMonth }\n      style={ { backgroundColor: theme.backgroundColor, color: theme.textColor }}>\n        {\n          monthNames.map((x) => (\n            <option value={x}>{ x }</option>\n          ))\n        }\n      </select>\n      <OverViewFinance finances={ useFinances } month={ useMonth }/>\n      <AddTransaction callback={ callbackChangeFinances } useMonth={ useMonth } />\n      <p className='select-p row' style={ { backgroundColor: theme.backgroundColor, color: theme.textColor }}>\n        This month\n        <select className='colunm' onChange={ handleSelectTransactions } style={ { backgroundColor: theme.backgroundColor, color: theme.textColor }}>\n          <option> expenses </option>\n          <option> profit </option>\n        </select>\n      </p>\n      {\n        display\n      }\n    </div>\n  )\n};\n\nFinance.propTypes = {};\n\nFinance.defaultProps = {};\n\nexport default Finance;\n","/home/humberto/all-in-pocket/src/components/FinanceComponents/OverViewFinance/OverViewFinance.js",["224","225"],[],"import React, { useContext, useEffect, useState } from 'react';\nimport pocketContext from '../../../context/pocketContext';\n\nconst OverViewFinance = ({ month }) => {\n  const {\n    finances,\n    theme,\n  } = useContext(pocketContext);\n  const totalExpenses = finances.filter((x) => x.month === month)[0].expenses.map((x) => x.value).reduce((x, sum) => x + sum, 0);\n  const totalProfit = finances.filter((x) => x.month === month)[0].profit.map((x) => x.value).reduce((x, sum) => x + sum, 0);\n  const total = totalProfit - totalExpenses;\n\n  return (\n    <div className='overview-finance colunm s-evenly scale-in-center' style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n      <div className='sub-finance colunm s-evenly'>\n        <div className='colunm s-evenly'>\n          <p>\n            Your balance\n          </p>\n          <h1 style={ total >= 0 ? { color: \"green\" } : { color: \"red\" } } className='overview-total'>\n            $ { total }\n          </h1>\n        </div>\n        <div className='row s-btw prof-expen'>\n          <p style={ { color: \"green\" } }>total income +${ totalProfit }</p>\n          <p style={ { color: \"red\" } }>total expenses -${ totalExpenses }</p>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nOverViewFinance.propTypes = {};\n\nOverViewFinance.defaultProps = {};\n\nexport default OverViewFinance;\n","/home/humberto/all-in-pocket/src/helpers/mockFinance.js",[],[],"/home/humberto/all-in-pocket/src/components/FinanceComponents/MonthExpenses/MonthExpenses.js",["226"],[],"import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TransactionCard from '../TransactionCard/TransactionCard';\nimport pocketContext from '../../../context/pocketContext';\nimport InputText from '../../Inputs/InputText/InputText';\nimport svgs from '../../../helpers/svg';\n\nconst MonthExpenses = ({ month, finances, callback }) => {\n  const [name, setName] = useState('');\n\n  const {\n    exTypes,\n    setExtypes,\n    theme,\n  } = useContext(pocketContext);\n\n  const newTypes = exTypes.map((tipo) => {\n    return {\n      [tipo]: [...finances.filter((x) => x.month === month)[0].expenses.filter((x) => x.type === tipo)].sort((a, b) => {\n        return b.date - a.date\n      }),\n    }\n  })\n\n  const handleChange = ({ target: { value } }) => {\n    if (value.length > 0 ) {\n      setName(value);\n    }\n  }\n\n  const handleClick = () => {\n    if (name.length) {\n      setExtypes([...exTypes, name]);\n      setName('');\n      localStorage.setItem('exTypes', JSON.stringify([...exTypes, name]));\n    }\n  }\n\n  const deleteCategory = (category) => {\n    setExtypes(exTypes.filter((x) => x !== category));\n    localStorage.setItem('exTypes', JSON.stringify(exTypes.filter((x) => x !== category)));\n  }\n\n  return (\n    <div className='month-expenses' >\n      <div className='row'>\n        <InputText placename=\"set new category\" callback={ handleChange }/>\n        <button className='add-finance-btn' onClick={ handleClick } style={ { backgroundColor: theme.backgroundColor, color: theme.textColor }}>{ svgs.plus() }</button>\n      </div>\n      {\n        newTypes.sort((a,b) => {\n          const varA = [...Object.values(a)[0]];\n          const varB = [...Object.values(b)[0]];\n          if (varA.length > 0 && varB.length === 0 ) {\n            return -1;\n          } else if (varA.length === 0 && varB.length > 0) {\n            return 1;\n          } else if (varA.length === 0 && varB.length === 0) {\n            return 0;\n          } else {\n            if (varA.reduce((total, x) => x.value + total, 0) > varB.reduce((total, x) => x.value + total, 0)) {\n              return -1;\n            } else if (varA.reduce((total, x) => x.value + total, 0) < varB.reduce((total, x) => x.value + total, 0)) {\n              return 1;\n            } else {\n              return 0;\n            }\n          }\n        }).map((x) => {\n          return (\n            <TransactionCard  array={ x } color=\"red\" callback={ callback } finances={ finances } month={ month } isProfit={false} deleteCategory={deleteCategory} />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nMonthExpenses.propTypes = {};\n\nMonthExpenses.defaultProps = {};\n\nexport default MonthExpenses;\n","/home/humberto/all-in-pocket/src/components/FinanceComponents/MonthProfit/MonthProfit.js",["227"],[],"import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TransactionCard from '../TransactionCard/TransactionCard';\nimport pocketContext from '../../../context/pocketContext';\nimport InputText from '../../Inputs/InputText/InputText';\nimport svgs from '../../../helpers/svg';\n\nconst MonthProfit = ({ month, finances, callback }) => {\n  const [name, setName] = useState('');\n  console.log(month);\n\n  const {\n    prTypes,\n    setPrtypes,\n    theme,\n  } = useContext(pocketContext);\n\n  const newTypes = prTypes.map((tipo) => {\n    return {\n      [tipo]: [...finances.filter((x) => x.month === month)[0].profit.filter((x) => x.type === tipo)].sort((a, b) => {\n        return b.date - a.date\n      }),\n    }\n  })\n\n  const handleChange = ({ target: { value } }) => {\n    if (value.length > 0 ) {\n      setName(value);\n    }\n  }\n\n  const handleClick = () => {\n    if (name.length) {\n      setPrtypes([...prTypes, name]);\n      setName('');\n      localStorage.setItem('prTypes', JSON.stringify([...prTypes, name]));\n    }\n  }\n\n  const deleteCategory = (category) => {\n    console.log(prTypes.filter((x) => x !== category), category)\n    setPrtypes(prTypes.filter((x) => x !== category));\n    localStorage.setItem('prTypes', JSON.stringify(prTypes.filter((x) => x !== category)));\n  }\n\n  return (\n    <div className='month-expenses'>\n      <div className='row'>\n        <InputText placename=\"set new category\" callback={ handleChange }/>\n        <button onClick={ handleClick } style={ { backgroundColor: theme.backgroundColor, color: theme.textColor }}>{ svgs.plus() }</button>\n      </div>\n      {\n        newTypes.map((x) => {\n          return (\n            <TransactionCard  array={ x } color=\"green\" callback={ callback } finances={ finances } month={ month } isProfit={true} deleteCategory={deleteCategory} />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nMonthProfit.propTypes = {};\n\nMonthProfit.defaultProps = {};\n\nexport default MonthProfit;\n","/home/humberto/all-in-pocket/src/components/FinanceComponents/TransactionCard/TransactionCard.js",[],[],"/home/humberto/all-in-pocket/src/components/FinanceComponents/AddTransaction/AddTransaction.js",["228","229"],[],"import React, { useContext, useEffect, useState, useSyncExternalStore } from 'react';\nimport PropTypes from 'prop-types';\nimport pocketContext from '../../../context/pocketContext';\nimport InputText from '../../Inputs/InputText/InputText';\nimport Checkbox from '../../Inputs/checkbox/Checkbox';\nimport svgs from '../../../helpers/svg';\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nconst days = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];\n\nconst AddTransaction = ({ callback, useMonth }) => {\n  const dateCode = new Date();\n  console.log(dateCode.getDate())\n  const [isProfit, setIsProfit] = useState(false);\n  const [name, setName] = useState('Transaction');\n  const [month, setMonth] = useState();\n  const [type, setType] = useState(0);\n  const [date, setDay] = useState(days[dateCode.getDate()]);\n  const [value, setValue] = useState(0);\n  const [svg, setSvg] = useState(svgs.plus());\n  const [empty, setEmpty] = useState(false);\n\n  const {\n    finances,\n    exTypes,\n    prTypes,\n    theme,\n  } = useContext(pocketContext);\n\n  const handleSelect = ({ target: { value, name } }) => {\n    if (name === \"month\") {\n      setMonth(value);\n    } else if ( name === \"date\") {\n      setDay(value);\n    } else {\n      setType(parseInt(value));\n    }\n  }\n\n  useEffect(() => {\n    setMonth(useMonth);\n  }, [useMonth]);\n\n  const handleClick = () => {\n    const newFinances = finances;\n    console.log(prTypes[type], type);\n    if ((isProfit && prTypes.length !== 0) || (!isProfit && exTypes.length !== 0 )) {\n      !isProfit ? newFinances.find((x) => x.month === month).expenses.push({\n        date,\n        value,\n        type: exTypes.length === 1 ? exTypes[0] : exTypes[type],\n        name,\n      }) : newFinances.find((x) => x.month === month).profit.push({\n        date,\n        value,\n        type: prTypes.length === 1 ? prTypes[0] : prTypes[type],\n        name,\n      });\n      localStorage.setItem('finances', JSON.stringify(newFinances));\n      callback(newFinances);      \n    }\n  }\n\n  return(\n    <div className='add-finance colunm s-btw scale-in-center' style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n      <div className='add row s-evenly'>\n        <p>Add a transaction</p>\n        <Checkbox name=\"Profit\" onClick={ () => {\n          setIsProfit(true)\n          setType(0);\n        } } />\n        <Checkbox name=\"Expenses\" onClick={ () => {\n          setIsProfit(false);\n          setType(0);\n        } } />\n      </div>\n      <div className='row s-evenly'>\n        <InputText placename=\"Description\" callback={ ({ target: { value } }) => setName(value) }/>\n        <div class=\"form\">\n          <input type='number' className='input' placeholder='How much ?' onChange={({ target: { value } }) => {\n            setValue(parseInt(value));\n          }}/>\n          <span class=\"input-border\"></span>\n        </div>\n      </div>\n      <div className='row add'>\n        <p>Date:</p>\n      <label>\n          Month\n          <select name='month' className='finance-select-plus colunm' onChange={ handleSelect } value={ month }\n          style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n          {\n            monthNames.map((x) => (\n              <option value={x}>{ x }</option>\n            ))\n          }\n          </select>\n        </label>\n        <label>\n          Day\n          <select name='date' className='finance-select colunm day' onChange={ handleSelect } value={ date }\n          style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n          {\n            days.map((x) => (<option value={x}>{ x }</option>))\n          }\n          </select>\n        </label>\n      </div>\n      <div className='add row'>\n        <p>Type: </p>\n        <select name='type' className='finance-select colunm type' onChange={ handleSelect } value={ type }\n        style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n          {\n            !isProfit ? (\n              exTypes.map((x, index) => (\n                <option value={index}>{ x }</option>\n              ))\n            ) : prTypes.map((x, index) => (\n              <option value={index}>{ x }</option>\n            ))\n          }\n        </select>\n      </div>\n        <button className='string-btn add-btn row' onClick={ () => {\n          if (value > 0) {\n            setTimeout(() => {\n              setSvg(svgs.plus());\n            }, 1000);\n            setSvg(svgs.checkmark());\n            handleClick();\n            setEmpty(false);\n          } else {\n            setEmpty(true);\n          }\n        } } style={ { backgroundColor: theme.primaryColor, color: theme.textColor }}>\n          <p>Add new Transaction</p>\n          { svg }\n        </button>\n        {\n          empty ? <p className='scale-in-center' style={ { color: 'red' } }>Please provide a Value for the transaction</p> : null\n        }\n    </div>\n  )\n};\n\nAddTransaction.propTypes = {};\n\nAddTransaction.defaultProps = {};\n\nexport default AddTransaction;\n","/home/humberto/all-in-pocket/src/components/LoginComponents/Login/Login.js",["230"],[],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport \"./login.css\"\n\n\nconst Login = () => {\n  return (\n    <div className='login'>\n      <h1>\n        Welcome to All.io,\n      </h1>\n      <p>Please, tell us your name</p>\n      <div class=\"form\">\n        <input class=\"input\" placeholder=\"your name\" required=\"\" type=\"text\" onChange={ () => {} } />\n        <span class=\"input-border\"></span>\n      </div>\n      <p>And your password</p>\n      <div class=\"form\">\n        <input class=\"input\" placeholder=\"password\" required=\"\" type=\"password\" onChange={ () => {} } />\n        <span class=\"input-border\"></span>\n      </div>\n    </div>\n  )\n};\n\nLogin.propTypes = {};\n\nLogin.defaultProps = {};\n\nexport default Login;\n","/home/humberto/all-in-pocket/src/components/Inputs/DarkLightModeSelector/DarkLightModeSelector.js",[],[],"/home/humberto/all-in-pocket/src/components/WeatherComponents/Weather/Weather.js",["231","232","233"],[],"/home/humberto/all-in-pocket/src/context/pocketContext.js",[],[],"/home/humberto/all-in-pocket/src/components/WeatherComponents/WeatherForm/WeatherForm.js",["234","235","236"],[],"/home/humberto/all-in-pocket/src/helpers/GeonamesReq.jsx",[],[],[],"/home/humberto/all-in-pocket/src/helpers/geonamesReqWithCounty.jsx",["237"],[],"/home/humberto/all-in-pocket/src/helpers/GeonamesReqWIthStates.jsx",["238"],[],"import axios from 'axios';\n\nconst fetchCitiesByState = async (countryCode, stateCode) => {\n  try {\n    var headers = new Headers();\n    headers.append(\"X-CSCAPI-KEY\", process.env.REACT_APP_API_KEY);\n\n    var requestOptions = {\n    method: 'GET',\n    headers: headers,\n    redirect: 'follow'\n    };\n\n    const res = fetch(`https://api.countrystatecity.in/v1/countries/${countryCode}/states/${stateCode}/cities`, requestOptions)\n    .then(response => response.json())\n    .then(jsonres => jsonres.map((x) => {\n      return {\n        value: x.name,\n        label: x.name,\n      }\n    }))\n    .catch(error => error);\n    return res;\n  } catch (error) {\n    console.error('Erro ao buscar cidades:', error);\n    return [];\n  }\n};\n\nexport default fetchCitiesByState;\n","/home/humberto/all-in-pocket/src/components/WeatherComponents/WeatherCard/WeatherCard.js",["239","240"],[],"/home/humberto/all-in-pocket/src/helpers/mockWeather.js",[],[],"/home/humberto/all-in-pocket/src/components/Inputs/Loading/Loading.js",[],[],{"ruleId":"241","severity":1,"message":"242","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":17},{"ruleId":"245","severity":1,"message":"246","line":42,"column":6,"nodeType":"247","endLine":42,"endColumn":16,"suggestions":"248"},{"ruleId":"241","severity":1,"message":"242","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":17},{"ruleId":"241","severity":1,"message":"242","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":17},{"ruleId":"241","severity":1,"message":"249","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":28},{"ruleId":"241","severity":1,"message":"242","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":17},{"ruleId":"241","severity":1,"message":"242","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":17},{"ruleId":"241","severity":1,"message":"250","line":1,"column":29,"nodeType":"243","messageId":"244","endLine":1,"endColumn":38},{"ruleId":"241","severity":1,"message":"251","line":1,"column":40,"nodeType":"243","messageId":"244","endLine":1,"endColumn":48},{"ruleId":"241","severity":1,"message":"242","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":17},{"ruleId":"241","severity":1,"message":"242","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":17},{"ruleId":"241","severity":1,"message":"252","line":1,"column":50,"nodeType":"243","messageId":"244","endLine":1,"endColumn":70},{"ruleId":"241","severity":1,"message":"242","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":17},{"ruleId":"241","severity":1,"message":"242","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":17},{"ruleId":"241","severity":1,"message":"250","line":1,"column":29,"nodeType":"243","messageId":"244","endLine":1,"endColumn":38},{"ruleId":"241","severity":1,"message":"253","line":5,"column":10,"nodeType":"243","messageId":"244","endLine":5,"endColumn":27},{"ruleId":"241","severity":1,"message":"254","line":5,"column":29,"nodeType":"243","messageId":"244","endLine":5,"endColumn":40},{"ruleId":"241","severity":1,"message":"255","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":14},{"ruleId":"241","severity":1,"message":"256","line":57,"column":18,"nodeType":"243","messageId":"244","endLine":57,"endColumn":38},{"ruleId":"245","severity":1,"message":"257","line":63,"column":6,"nodeType":"247","endLine":63,"endColumn":8,"suggestions":"258"},{"ruleId":"241","severity":1,"message":"259","line":1,"column":8,"nodeType":"243","messageId":"244","endLine":1,"endColumn":13},{"ruleId":"241","severity":1,"message":"259","line":1,"column":8,"nodeType":"243","messageId":"244","endLine":1,"endColumn":13},{"ruleId":"241","severity":1,"message":"242","line":2,"column":8,"nodeType":"243","messageId":"244","endLine":2,"endColumn":17},{"ruleId":"260","severity":1,"message":"261","line":87,"column":17,"nodeType":"262","endLine":87,"endColumn":37},"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id', 'tasks', and 'weak'. Either include them or remove the dependency array. If 'setWeakDays' needs the current value of 'weak', you can also switch to useReducer instead of useState and read 'weak' in the reducer.","ArrayExpression",["263"],"'useCallback' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useSyncExternalStore' is defined but never used.","'mockFutureWeather' is defined but never used.","'weatherFake' is defined but never used.","'Select' is defined but never used.","'fetchDataWithCountry' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["264"],"'axios' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},"Update the dependencies array to be: [id, onlyOnce, tasks, weak]",{"range":"269","text":"270"},"Update the dependencies array to be: [fetchData]",{"range":"271","text":"272"},[1749,1759],"[id, onlyOnce, tasks, weak]",[1875,1877],"[fetchData]"]