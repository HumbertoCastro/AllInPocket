{"ast":null,"code":"var _jsxFileName = \"/home/humberto/all-in-pocket/src/components/WeatherComponents/WeatherForm/WeatherForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport fetchCountryNames from '../../../helpers/GeonamesReq';\nimport fetchStatesByCountry from '../../../helpers/geonamesReqWithCounty';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WeatherForm = () => {\n  _s();\n  const [country, setCountry] = useState(null);\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [countryOptions, setCountrys] = useState(null);\n  const [showStates, setShowStates] = useState(false);\n  async function handleCountryChange(_ref) {\n    let {\n      value\n    } = _ref;\n    setCountry(value);\n    const res = await fetchStatesByCountry(value);\n    console.log(res);\n  }\n  ;\n  const handleCityChange = event => {\n    setCity(event.target.value);\n  };\n  const handleStateChange = event => {\n    setState(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Faça a requisição à API utilizando os valores selecionados ou digitados\n    console.log('País:', country);\n    console.log('Cidade:', city);\n    console.log('Estado:', state);\n  };\n  async function fetchData() {\n    const res = await fetchCountryNames();\n    setCountrys(res);\n  }\n  async function fetchDataWithCountry(country) {}\n  useEffect(() => {\n    fetchData();\n  }, []);\n  console.log(typeof countryOptions);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: countryOptions ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Pa\\xEDs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          options: countryOptions,\n          onChange: handleCountryChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Buscar Clima\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherForm, \"vwmRsGJDCHTlBZGphYQGbvzS4z8=\");\n_c = WeatherForm;\nexport default WeatherForm;\nvar _c;\n$RefreshReg$(_c, \"WeatherForm\");","map":{"version":3,"names":["React","useEffect","useState","Select","fetchCountryNames","fetchStatesByCountry","jsxDEV","_jsxDEV","Fragment","_Fragment","WeatherForm","_s","country","setCountry","city","setCity","state","setState","countryOptions","setCountrys","showStates","setShowStates","handleCountryChange","_ref","value","res","console","log","handleCityChange","event","target","handleStateChange","handleSubmit","preventDefault","fetchData","fetchDataWithCountry","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","options","onChange","type","_c","$RefreshReg$"],"sources":["/home/humberto/all-in-pocket/src/components/WeatherComponents/WeatherForm/WeatherForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport fetchCountryNames from '../../../helpers/GeonamesReq';\nimport fetchStatesByCountry from '../../../helpers/geonamesReqWithCounty';\n\nconst WeatherForm = () => {\n  const [country, setCountry] = useState(null);\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [countryOptions, setCountrys] = useState(null);\n  const [showStates, setShowStates] = useState(false);\n  async function handleCountryChange({ value }) {\n    setCountry(value);\n    const res = await fetchStatesByCountry(value);    \n    console.log(res);\n  };\n\n  const handleCityChange = event => {\n    setCity(event.target.value);\n  };\n\n  const handleStateChange = event => {\n    setState(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Faça a requisição à API utilizando os valores selecionados ou digitados\n    console.log('País:', country);\n    console.log('Cidade:', city);\n    console.log('Estado:', state);\n  };\n  async function fetchData() {\n    const res = await fetchCountryNames();\n    setCountrys(res);\n  }\n\n  async function fetchDataWithCountry (country) {\n\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, [])\n\n  console.log(typeof countryOptions);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {\n        countryOptions ? (\n          <>\n            <div>\n              <label>País:</label>\n              <Select options={countryOptions} onChange={handleCountryChange} />\n            </div>\n            <button type=\"submit\">Buscar Clima</button>\n          </>\n          ) : null\n      }\n    </form>\n  );\n};\n\nexport default WeatherForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}