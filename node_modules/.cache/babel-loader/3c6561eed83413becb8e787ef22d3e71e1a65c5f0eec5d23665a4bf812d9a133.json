{"ast":null,"code":"import axios from 'axios';\nconst geonamesUsername = 'humbertocastro';\nconsole.log(process.env.GEONAMES_USERNAME);\nconst baseUrl = 'http://api.geonames.org';\nconst fetchCountryNames = async () => {\n  try {\n    console.log(process.env.GEONAMES_USERNAME, 'USERNAME');\n    const response = await axios.get(`${baseUrl}/countryInfoJSON`, {\n      params: {\n        username: geonamesUsername\n      }\n    });\n    console.log(response);\n    // Processar os resultados para extrair apenas os nomes dos países\n    const countryNames = response.data.geonames.map(_ref => {\n      let {\n        countryName,\n        countryCode\n      } = _ref;\n      return {\n        value: countryCode,\n        label: countryName\n      };\n    });\n    console.log(countryNames);\n    return countryNames;\n  } catch (error) {\n    console.error('Erro ao buscar nomes dos países:', error);\n    return [];\n  }\n};\nexport default fetchCountryNames;","map":{"version":3,"names":["axios","geonamesUsername","console","log","process","env","GEONAMES_USERNAME","baseUrl","fetchCountryNames","response","get","params","username","countryNames","data","geonames","map","_ref","countryName","countryCode","value","label","error"],"sources":["/home/humberto/all-in-pocket/src/helpers/GeonamesReq.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst geonamesUsername = 'humbertocastro';\nconsole.log(process.env.GEONAMES_USERNAME)\nconst baseUrl = 'http://api.geonames.org';\n\nconst fetchCountryNames = async () => {\n  try {\n    console.log(process.env.GEONAMES_USERNAME, 'USERNAME');\n    const response = await axios.get(`${baseUrl}/countryInfoJSON`, {\n      params: {\n        username: geonamesUsername,\n      },\n    });\n    console.log(response);\n    // Processar os resultados para extrair apenas os nomes dos países\n    const countryNames = response.data.geonames.map(({ countryName, countryCode }) => {\n      return {\n        value: countryCode,\n        label: countryName,\n      }\n    });\n\n    console.log(countryNames);\n    return countryNames;\n  } catch (error) {\n    console.error('Erro ao buscar nomes dos países:', error);\n    return [];\n  }\n};\n\nexport default fetchCountryNames;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,gBAAgB,GAAG,gBAAgB;AACzCC,OAAO,CAACC,GAAG,CAACC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAC;AAC1C,MAAMC,OAAO,GAAG,yBAAyB;AAEzC,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAI;IACFN,OAAO,CAACC,GAAG,CAACC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAE,UAAU,CAAC;IACtD,MAAMG,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAE,GAAEH,OAAQ,kBAAiB,EAAE;MAC7DI,MAAM,EAAE;QACNC,QAAQ,EAAEX;MACZ;IACF,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAACM,QAAQ,CAAC;IACrB;IACA,MAAMI,YAAY,GAAGJ,QAAQ,CAACK,IAAI,CAACC,QAAQ,CAACC,GAAG,CAACC,IAAA,IAAkC;MAAA,IAAjC;QAAEC,WAAW;QAAEC;MAAY,CAAC,GAAAF,IAAA;MAC3E,OAAO;QACLG,KAAK,EAAED,WAAW;QAClBE,KAAK,EAAEH;MACT,CAAC;IACH,CAAC,CAAC;IAEFhB,OAAO,CAACC,GAAG,CAACU,YAAY,CAAC;IACzB,OAAOA,YAAY;EACrB,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdpB,OAAO,CAACoB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,EAAE;EACX;AACF,CAAC;AAED,eAAed,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}